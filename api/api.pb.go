// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package api

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StatusCode int32

const (
	StatusCode_OK                           StatusCode = 0
	StatusCode_UNKNOWN                      StatusCode = 1
	StatusCode_STORAGE_NOT_FOUND            StatusCode = 2
	StatusCode_STORAGE_ALREADY_EXISTS       StatusCode = 3
	StatusCode_STORAGE_PERMISSIONDENIED     StatusCode = 4
	StatusCode_CONTEXT_USER_REQUIRED        StatusCode = 5
	StatusCode_PATH_INVALID                 StatusCode = 6
	StatusCode_PUBLIC_LINK_NOT_FOUND        StatusCode = 7
	StatusCode_PUBLIC_LINK_INVALID_DATE     StatusCode = 8
	StatusCode_PUBLIC_LINK_INVALID_PASSWORD StatusCode = 9
	StatusCode_STORAGE_NOT_SUPPORTED        StatusCode = 10
	StatusCode_USER_NOT_FOUND               StatusCode = 11
	StatusCode_TOKEN_INVALID                StatusCode = 12
	StatusCode_FOLDER_SHARE_NOT_FOUND       StatusCode = 13
)

var StatusCode_name = map[int32]string{
	0:  "OK",
	1:  "UNKNOWN",
	2:  "STORAGE_NOT_FOUND",
	3:  "STORAGE_ALREADY_EXISTS",
	4:  "STORAGE_PERMISSIONDENIED",
	5:  "CONTEXT_USER_REQUIRED",
	6:  "PATH_INVALID",
	7:  "PUBLIC_LINK_NOT_FOUND",
	8:  "PUBLIC_LINK_INVALID_DATE",
	9:  "PUBLIC_LINK_INVALID_PASSWORD",
	10: "STORAGE_NOT_SUPPORTED",
	11: "USER_NOT_FOUND",
	12: "TOKEN_INVALID",
	13: "FOLDER_SHARE_NOT_FOUND",
}

var StatusCode_value = map[string]int32{
	"OK":                           0,
	"UNKNOWN":                      1,
	"STORAGE_NOT_FOUND":            2,
	"STORAGE_ALREADY_EXISTS":       3,
	"STORAGE_PERMISSIONDENIED":     4,
	"CONTEXT_USER_REQUIRED":        5,
	"PATH_INVALID":                 6,
	"PUBLIC_LINK_NOT_FOUND":        7,
	"PUBLIC_LINK_INVALID_DATE":     8,
	"PUBLIC_LINK_INVALID_PASSWORD": 9,
	"STORAGE_NOT_SUPPORTED":        10,
	"USER_NOT_FOUND":               11,
	"TOKEN_INVALID":                12,
	"FOLDER_SHARE_NOT_FOUND":       13,
}

func (x StatusCode) String() string {
	return proto.EnumName(StatusCode_name, int32(x))
}

func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

type Tag_ItemType int32

const (
	Tag_FOLDER Tag_ItemType = 0
	Tag_FILE   Tag_ItemType = 1
)

var Tag_ItemType_name = map[int32]string{
	0: "FOLDER",
	1: "FILE",
}

var Tag_ItemType_value = map[string]int32{
	"FOLDER": 0,
	"FILE":   1,
}

func (x Tag_ItemType) String() string {
	return proto.EnumName(Tag_ItemType_name, int32(x))
}

func (Tag_ItemType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1, 0}
}

type ShareRecipient_RecipientType int32

const (
	ShareRecipient_USER  ShareRecipient_RecipientType = 0
	ShareRecipient_GROUP ShareRecipient_RecipientType = 1
	ShareRecipient_UNIX  ShareRecipient_RecipientType = 2
)

var ShareRecipient_RecipientType_name = map[int32]string{
	0: "USER",
	1: "GROUP",
	2: "UNIX",
}

var ShareRecipient_RecipientType_value = map[string]int32{
	"USER":  0,
	"GROUP": 1,
	"UNIX":  2,
}

func (x ShareRecipient_RecipientType) String() string {
	return proto.EnumName(ShareRecipient_RecipientType_name, int32(x))
}

func (ShareRecipient_RecipientType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{40, 0}
}

type PublicLink_ItemType int32

const (
	PublicLink_FILE   PublicLink_ItemType = 0
	PublicLink_FOLDER PublicLink_ItemType = 1
)

var PublicLink_ItemType_name = map[int32]string{
	0: "FILE",
	1: "FOLDER",
}

var PublicLink_ItemType_value = map[string]int32{
	"FILE":   0,
	"FOLDER": 1,
}

func (x PublicLink_ItemType) String() string {
	return proto.EnumName(PublicLink_ItemType_name, int32(x))
}

func (PublicLink_ItemType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{42, 0}
}

type FolderShare_State int32

const (
	FolderShare_ACCEPTED FolderShare_State = 0
	FolderShare_PENDING  FolderShare_State = 1
	FolderShare_REJECTED FolderShare_State = 2
)

var FolderShare_State_name = map[int32]string{
	0: "ACCEPTED",
	1: "PENDING",
	2: "REJECTED",
}

var FolderShare_State_value = map[string]int32{
	"ACCEPTED": 0,
	"PENDING":  1,
	"REJECTED": 2,
}

func (x FolderShare_State) String() string {
	return proto.EnumName(FolderShare_State_name, int32(x))
}

func (FolderShare_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{46, 0}
}

type OCMShare_State int32

const (
	OCMShare_ACCEPTED OCMShare_State = 0
	OCMShare_PENDING  OCMShare_State = 1
	OCMShare_REJECTED OCMShare_State = 2
)

var OCMShare_State_name = map[int32]string{
	0: "ACCEPTED",
	1: "PENDING",
	2: "REJECTED",
}

var OCMShare_State_value = map[string]int32{
	"ACCEPTED": 0,
	"PENDING":  1,
	"REJECTED": 2,
}

func (x OCMShare_State) String() string {
	return proto.EnumName(OCMShare_State_name, int32(x))
}

func (OCMShare_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{48, 0}
}

type TagReq struct {
	TagKey               string   `protobuf:"bytes,1,opt,name=tag_key,json=tagKey,proto3" json:"tag_key,omitempty"`
	TagVal               string   `protobuf:"bytes,2,opt,name=tag_val,json=tagVal,proto3" json:"tag_val,omitempty"`
	Path                 string   `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TagReq) Reset()         { *m = TagReq{} }
func (m *TagReq) String() string { return proto.CompactTextString(m) }
func (*TagReq) ProtoMessage()    {}
func (*TagReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *TagReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TagReq.Unmarshal(m, b)
}
func (m *TagReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TagReq.Marshal(b, m, deterministic)
}
func (m *TagReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagReq.Merge(m, src)
}
func (m *TagReq) XXX_Size() int {
	return xxx_messageInfo_TagReq.Size(m)
}
func (m *TagReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TagReq.DiscardUnknown(m)
}

var xxx_messageInfo_TagReq proto.InternalMessageInfo

func (m *TagReq) GetTagKey() string {
	if m != nil {
		return m.TagKey
	}
	return ""
}

func (m *TagReq) GetTagVal() string {
	if m != nil {
		return m.TagVal
	}
	return ""
}

func (m *TagReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type Tag struct {
	Id                   int64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ItemType             Tag_ItemType `protobuf:"varint,2,opt,name=item_type,json=itemType,proto3,enum=api.Tag_ItemType" json:"item_type,omitempty"`
	Uid                  string       `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	FileIdPrefix         string       `protobuf:"bytes,4,opt,name=file_id_prefix,json=fileIdPrefix,proto3" json:"file_id_prefix,omitempty"`
	FileId               string       `protobuf:"bytes,5,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	TagKey               string       `protobuf:"bytes,6,opt,name=tag_key,json=tagKey,proto3" json:"tag_key,omitempty"`
	TagValue             string       `protobuf:"bytes,7,opt,name=tag_value,json=tagValue,proto3" json:"tag_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Tag) Reset()         { *m = Tag{} }
func (m *Tag) String() string { return proto.CompactTextString(m) }
func (*Tag) ProtoMessage()    {}
func (*Tag) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *Tag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tag.Unmarshal(m, b)
}
func (m *Tag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tag.Marshal(b, m, deterministic)
}
func (m *Tag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tag.Merge(m, src)
}
func (m *Tag) XXX_Size() int {
	return xxx_messageInfo_Tag.Size(m)
}
func (m *Tag) XXX_DiscardUnknown() {
	xxx_messageInfo_Tag.DiscardUnknown(m)
}

var xxx_messageInfo_Tag proto.InternalMessageInfo

func (m *Tag) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Tag) GetItemType() Tag_ItemType {
	if m != nil {
		return m.ItemType
	}
	return Tag_FOLDER
}

func (m *Tag) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *Tag) GetFileIdPrefix() string {
	if m != nil {
		return m.FileIdPrefix
	}
	return ""
}

func (m *Tag) GetFileId() string {
	if m != nil {
		return m.FileId
	}
	return ""
}

func (m *Tag) GetTagKey() string {
	if m != nil {
		return m.TagKey
	}
	return ""
}

func (m *Tag) GetTagValue() string {
	if m != nil {
		return m.TagValue
	}
	return ""
}

type TagResponse struct {
	Status               StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=api.StatusCode" json:"status,omitempty"`
	Tag                  *Tag       `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *TagResponse) Reset()         { *m = TagResponse{} }
func (m *TagResponse) String() string { return proto.CompactTextString(m) }
func (*TagResponse) ProtoMessage()    {}
func (*TagResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}

func (m *TagResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TagResponse.Unmarshal(m, b)
}
func (m *TagResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TagResponse.Marshal(b, m, deterministic)
}
func (m *TagResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagResponse.Merge(m, src)
}
func (m *TagResponse) XXX_Size() int {
	return xxx_messageInfo_TagResponse.Size(m)
}
func (m *TagResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TagResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TagResponse proto.InternalMessageInfo

func (m *TagResponse) GetStatus() StatusCode {
	if m != nil {
		return m.Status
	}
	return StatusCode_OK
}

func (m *TagResponse) GetTag() *Tag {
	if m != nil {
		return m.Tag
	}
	return nil
}

type IsPublicLinkProtectedResponse struct {
	Status               StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=api.StatusCode" json:"status,omitempty"`
	Protected            bool       `protobuf:"varint,2,opt,name=protected,proto3" json:"protected,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *IsPublicLinkProtectedResponse) Reset()         { *m = IsPublicLinkProtectedResponse{} }
func (m *IsPublicLinkProtectedResponse) String() string { return proto.CompactTextString(m) }
func (*IsPublicLinkProtectedResponse) ProtoMessage()    {}
func (*IsPublicLinkProtectedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}

func (m *IsPublicLinkProtectedResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsPublicLinkProtectedResponse.Unmarshal(m, b)
}
func (m *IsPublicLinkProtectedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsPublicLinkProtectedResponse.Marshal(b, m, deterministic)
}
func (m *IsPublicLinkProtectedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsPublicLinkProtectedResponse.Merge(m, src)
}
func (m *IsPublicLinkProtectedResponse) XXX_Size() int {
	return xxx_messageInfo_IsPublicLinkProtectedResponse.Size(m)
}
func (m *IsPublicLinkProtectedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IsPublicLinkProtectedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IsPublicLinkProtectedResponse proto.InternalMessageInfo

func (m *IsPublicLinkProtectedResponse) GetStatus() StatusCode {
	if m != nil {
		return m.Status
	}
	return StatusCode_OK
}

func (m *IsPublicLinkProtectedResponse) GetProtected() bool {
	if m != nil {
		return m.Protected
	}
	return false
}

type ForgePublicLinkTokenReq struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ForgePublicLinkTokenReq) Reset()         { *m = ForgePublicLinkTokenReq{} }
func (m *ForgePublicLinkTokenReq) String() string { return proto.CompactTextString(m) }
func (*ForgePublicLinkTokenReq) ProtoMessage()    {}
func (*ForgePublicLinkTokenReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}

func (m *ForgePublicLinkTokenReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ForgePublicLinkTokenReq.Unmarshal(m, b)
}
func (m *ForgePublicLinkTokenReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ForgePublicLinkTokenReq.Marshal(b, m, deterministic)
}
func (m *ForgePublicLinkTokenReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForgePublicLinkTokenReq.Merge(m, src)
}
func (m *ForgePublicLinkTokenReq) XXX_Size() int {
	return xxx_messageInfo_ForgePublicLinkTokenReq.Size(m)
}
func (m *ForgePublicLinkTokenReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ForgePublicLinkTokenReq.DiscardUnknown(m)
}

var xxx_messageInfo_ForgePublicLinkTokenReq proto.InternalMessageInfo

func (m *ForgePublicLinkTokenReq) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ForgePublicLinkTokenReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type ForgePublicLinkTokenResponse struct {
	Status               StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=api.StatusCode" json:"status,omitempty"`
	Valid                bool       `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ForgePublicLinkTokenResponse) Reset()         { *m = ForgePublicLinkTokenResponse{} }
func (m *ForgePublicLinkTokenResponse) String() string { return proto.CompactTextString(m) }
func (*ForgePublicLinkTokenResponse) ProtoMessage()    {}
func (*ForgePublicLinkTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}

func (m *ForgePublicLinkTokenResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ForgePublicLinkTokenResponse.Unmarshal(m, b)
}
func (m *ForgePublicLinkTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ForgePublicLinkTokenResponse.Marshal(b, m, deterministic)
}
func (m *ForgePublicLinkTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForgePublicLinkTokenResponse.Merge(m, src)
}
func (m *ForgePublicLinkTokenResponse) XXX_Size() int {
	return xxx_messageInfo_ForgePublicLinkTokenResponse.Size(m)
}
func (m *ForgePublicLinkTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ForgePublicLinkTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ForgePublicLinkTokenResponse proto.InternalMessageInfo

func (m *ForgePublicLinkTokenResponse) GetStatus() StatusCode {
	if m != nil {
		return m.Status
	}
	return StatusCode_OK
}

func (m *ForgePublicLinkTokenResponse) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

type VerifyPublicLinkTokenReq struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VerifyPublicLinkTokenReq) Reset()         { *m = VerifyPublicLinkTokenReq{} }
func (m *VerifyPublicLinkTokenReq) String() string { return proto.CompactTextString(m) }
func (*VerifyPublicLinkTokenReq) ProtoMessage()    {}
func (*VerifyPublicLinkTokenReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}

func (m *VerifyPublicLinkTokenReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VerifyPublicLinkTokenReq.Unmarshal(m, b)
}
func (m *VerifyPublicLinkTokenReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VerifyPublicLinkTokenReq.Marshal(b, m, deterministic)
}
func (m *VerifyPublicLinkTokenReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyPublicLinkTokenReq.Merge(m, src)
}
func (m *VerifyPublicLinkTokenReq) XXX_Size() int {
	return xxx_messageInfo_VerifyPublicLinkTokenReq.Size(m)
}
func (m *VerifyPublicLinkTokenReq) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyPublicLinkTokenReq.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyPublicLinkTokenReq proto.InternalMessageInfo

func (m *VerifyPublicLinkTokenReq) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type VerifyPublicLinkTokenResponse struct {
	Status               StatusCode  `protobuf:"varint,1,opt,name=status,proto3,enum=api.StatusCode" json:"status,omitempty"`
	PublicLink           *PublicLink `protobuf:"bytes,2,opt,name=public_link,json=publicLink,proto3" json:"public_link,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *VerifyPublicLinkTokenResponse) Reset()         { *m = VerifyPublicLinkTokenResponse{} }
func (m *VerifyPublicLinkTokenResponse) String() string { return proto.CompactTextString(m) }
func (*VerifyPublicLinkTokenResponse) ProtoMessage()    {}
func (*VerifyPublicLinkTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}

func (m *VerifyPublicLinkTokenResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VerifyPublicLinkTokenResponse.Unmarshal(m, b)
}
func (m *VerifyPublicLinkTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VerifyPublicLinkTokenResponse.Marshal(b, m, deterministic)
}
func (m *VerifyPublicLinkTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyPublicLinkTokenResponse.Merge(m, src)
}
func (m *VerifyPublicLinkTokenResponse) XXX_Size() int {
	return xxx_messageInfo_VerifyPublicLinkTokenResponse.Size(m)
}
func (m *VerifyPublicLinkTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyPublicLinkTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyPublicLinkTokenResponse proto.InternalMessageInfo

func (m *VerifyPublicLinkTokenResponse) GetStatus() StatusCode {
	if m != nil {
		return m.Status
	}
	return StatusCode_OK
}

func (m *VerifyPublicLinkTokenResponse) GetPublicLink() *PublicLink {
	if m != nil {
		return m.PublicLink
	}
	return nil
}

type EmptyResponse struct {
	Status               StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=api.StatusCode" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *EmptyResponse) Reset()         { *m = EmptyResponse{} }
func (m *EmptyResponse) String() string { return proto.CompactTextString(m) }
func (*EmptyResponse) ProtoMessage()    {}
func (*EmptyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}

func (m *EmptyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmptyResponse.Unmarshal(m, b)
}
func (m *EmptyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmptyResponse.Marshal(b, m, deterministic)
}
func (m *EmptyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyResponse.Merge(m, src)
}
func (m *EmptyResponse) XXX_Size() int {
	return xxx_messageInfo_EmptyResponse.Size(m)
}
func (m *EmptyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyResponse proto.InternalMessageInfo

func (m *EmptyResponse) GetStatus() StatusCode {
	if m != nil {
		return m.Status
	}
	return StatusCode_OK
}

type EmptyReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyReq) Reset()         { *m = EmptyReq{} }
func (m *EmptyReq) String() string { return proto.CompactTextString(m) }
func (*EmptyReq) ProtoMessage()    {}
func (*EmptyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}

func (m *EmptyReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmptyReq.Unmarshal(m, b)
}
func (m *EmptyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmptyReq.Marshal(b, m, deterministic)
}
func (m *EmptyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyReq.Merge(m, src)
}
func (m *EmptyReq) XXX_Size() int {
	return xxx_messageInfo_EmptyReq.Size(m)
}
func (m *EmptyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyReq.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyReq proto.InternalMessageInfo

type QuotaReq struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QuotaReq) Reset()         { *m = QuotaReq{} }
func (m *QuotaReq) String() string { return proto.CompactTextString(m) }
func (*QuotaReq) ProtoMessage()    {}
func (*QuotaReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{10}
}

func (m *QuotaReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuotaReq.Unmarshal(m, b)
}
func (m *QuotaReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuotaReq.Marshal(b, m, deterministic)
}
func (m *QuotaReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuotaReq.Merge(m, src)
}
func (m *QuotaReq) XXX_Size() int {
	return xxx_messageInfo_QuotaReq.Size(m)
}
func (m *QuotaReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QuotaReq.DiscardUnknown(m)
}

var xxx_messageInfo_QuotaReq proto.InternalMessageInfo

func (m *QuotaReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type QuotaResponse struct {
	Status               StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=api.StatusCode" json:"status,omitempty"`
	TotalBytes           int64      `protobuf:"varint,2,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`
	UsedBytes            int64      `protobuf:"varint,3,opt,name=used_bytes,json=usedBytes,proto3" json:"used_bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *QuotaResponse) Reset()         { *m = QuotaResponse{} }
func (m *QuotaResponse) String() string { return proto.CompactTextString(m) }
func (*QuotaResponse) ProtoMessage()    {}
func (*QuotaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{11}
}

func (m *QuotaResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuotaResponse.Unmarshal(m, b)
}
func (m *QuotaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuotaResponse.Marshal(b, m, deterministic)
}
func (m *QuotaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuotaResponse.Merge(m, src)
}
func (m *QuotaResponse) XXX_Size() int {
	return xxx_messageInfo_QuotaResponse.Size(m)
}
func (m *QuotaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuotaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuotaResponse proto.InternalMessageInfo

func (m *QuotaResponse) GetStatus() StatusCode {
	if m != nil {
		return m.Status
	}
	return StatusCode_OK
}

func (m *QuotaResponse) GetTotalBytes() int64 {
	if m != nil {
		return m.TotalBytes
	}
	return 0
}

func (m *QuotaResponse) GetUsedBytes() int64 {
	if m != nil {
		return m.UsedBytes
	}
	return 0
}

type UserResponse struct {
	Status               StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=api.StatusCode" json:"status,omitempty"`
	User                 *User      `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *UserResponse) Reset()         { *m = UserResponse{} }
func (m *UserResponse) String() string { return proto.CompactTextString(m) }
func (*UserResponse) ProtoMessage()    {}
func (*UserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{12}
}

func (m *UserResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserResponse.Unmarshal(m, b)
}
func (m *UserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserResponse.Marshal(b, m, deterministic)
}
func (m *UserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserResponse.Merge(m, src)
}
func (m *UserResponse) XXX_Size() int {
	return xxx_messageInfo_UserResponse.Size(m)
}
func (m *UserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserResponse proto.InternalMessageInfo

func (m *UserResponse) GetStatus() StatusCode {
	if m != nil {
		return m.Status
	}
	return StatusCode_OK
}

func (m *UserResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type User struct {
	AccountId            string   `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Groups               []string `protobuf:"bytes,2,rep,name=groups,proto3" json:"groups,omitempty"`
	DisplayName          string   `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{13}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *User) GetGroups() []string {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *User) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

type TxInfoResponse struct {
	Status               StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=api.StatusCode" json:"status,omitempty"`
	TxInfo               *TxInfo    `protobuf:"bytes,2,opt,name=txInfo,proto3" json:"txInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *TxInfoResponse) Reset()         { *m = TxInfoResponse{} }
func (m *TxInfoResponse) String() string { return proto.CompactTextString(m) }
func (*TxInfoResponse) ProtoMessage()    {}
func (*TxInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{14}
}

func (m *TxInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TxInfoResponse.Unmarshal(m, b)
}
func (m *TxInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TxInfoResponse.Marshal(b, m, deterministic)
}
func (m *TxInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxInfoResponse.Merge(m, src)
}
func (m *TxInfoResponse) XXX_Size() int {
	return xxx_messageInfo_TxInfoResponse.Size(m)
}
func (m *TxInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TxInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TxInfoResponse proto.InternalMessageInfo

func (m *TxInfoResponse) GetStatus() StatusCode {
	if m != nil {
		return m.Status
	}
	return StatusCode_OK
}

func (m *TxInfoResponse) GetTxInfo() *TxInfo {
	if m != nil {
		return m.TxInfo
	}
	return nil
}

type TxInfo struct {
	TxId                 string   `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TxInfo) Reset()         { *m = TxInfo{} }
func (m *TxInfo) String() string { return proto.CompactTextString(m) }
func (*TxInfo) ProtoMessage()    {}
func (*TxInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{15}
}

func (m *TxInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TxInfo.Unmarshal(m, b)
}
func (m *TxInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TxInfo.Marshal(b, m, deterministic)
}
func (m *TxInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxInfo.Merge(m, src)
}
func (m *TxInfo) XXX_Size() int {
	return xxx_messageInfo_TxInfo.Size(m)
}
func (m *TxInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TxInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TxInfo proto.InternalMessageInfo

func (m *TxInfo) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

type ForgeUserTokenReq struct {
	ClientId             string   `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret         string   `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	Token                string   `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ForgeUserTokenReq) Reset()         { *m = ForgeUserTokenReq{} }
func (m *ForgeUserTokenReq) String() string { return proto.CompactTextString(m) }
func (*ForgeUserTokenReq) ProtoMessage()    {}
func (*ForgeUserTokenReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{16}
}

func (m *ForgeUserTokenReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ForgeUserTokenReq.Unmarshal(m, b)
}
func (m *ForgeUserTokenReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ForgeUserTokenReq.Marshal(b, m, deterministic)
}
func (m *ForgeUserTokenReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForgeUserTokenReq.Merge(m, src)
}
func (m *ForgeUserTokenReq) XXX_Size() int {
	return xxx_messageInfo_ForgeUserTokenReq.Size(m)
}
func (m *ForgeUserTokenReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ForgeUserTokenReq.DiscardUnknown(m)
}

var xxx_messageInfo_ForgeUserTokenReq proto.InternalMessageInfo

func (m *ForgeUserTokenReq) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *ForgeUserTokenReq) GetClientSecret() string {
	if m != nil {
		return m.ClientSecret
	}
	return ""
}

func (m *ForgeUserTokenReq) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type TokenResponse struct {
	Status               StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=api.StatusCode" json:"status,omitempty"`
	Token                string     `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *TokenResponse) Reset()         { *m = TokenResponse{} }
func (m *TokenResponse) String() string { return proto.CompactTextString(m) }
func (*TokenResponse) ProtoMessage()    {}
func (*TokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{17}
}

func (m *TokenResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenResponse.Unmarshal(m, b)
}
func (m *TokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenResponse.Marshal(b, m, deterministic)
}
func (m *TokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenResponse.Merge(m, src)
}
func (m *TokenResponse) XXX_Size() int {
	return xxx_messageInfo_TokenResponse.Size(m)
}
func (m *TokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TokenResponse proto.InternalMessageInfo

func (m *TokenResponse) GetStatus() StatusCode {
	if m != nil {
		return m.Status
	}
	return StatusCode_OK
}

func (m *TokenResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type TokenReq struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokenReq) Reset()         { *m = TokenReq{} }
func (m *TokenReq) String() string { return proto.CompactTextString(m) }
func (*TokenReq) ProtoMessage()    {}
func (*TokenReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{18}
}

func (m *TokenReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenReq.Unmarshal(m, b)
}
func (m *TokenReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenReq.Marshal(b, m, deterministic)
}
func (m *TokenReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenReq.Merge(m, src)
}
func (m *TokenReq) XXX_Size() int {
	return xxx_messageInfo_TokenReq.Size(m)
}
func (m *TokenReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenReq.DiscardUnknown(m)
}

var xxx_messageInfo_TokenReq proto.InternalMessageInfo

func (m *TokenReq) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type MetadataResponse struct {
	Status               StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=api.StatusCode" json:"status,omitempty"`
	Metadata             *Metadata  `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *MetadataResponse) Reset()         { *m = MetadataResponse{} }
func (m *MetadataResponse) String() string { return proto.CompactTextString(m) }
func (*MetadataResponse) ProtoMessage()    {}
func (*MetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{19}
}

func (m *MetadataResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetadataResponse.Unmarshal(m, b)
}
func (m *MetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetadataResponse.Marshal(b, m, deterministic)
}
func (m *MetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetadataResponse.Merge(m, src)
}
func (m *MetadataResponse) XXX_Size() int {
	return xxx_messageInfo_MetadataResponse.Size(m)
}
func (m *MetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MetadataResponse proto.InternalMessageInfo

func (m *MetadataResponse) GetStatus() StatusCode {
	if m != nil {
		return m.Status
	}
	return StatusCode_OK
}

func (m *MetadataResponse) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type Metadata struct {
	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Path        string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Size        uint64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Mtime       uint64 `protobuf:"varint,4,opt,name=mtime,proto3" json:"mtime,omitempty"`
	IsDir       bool   `protobuf:"varint,5,opt,name=is_dir,json=isDir,proto3" json:"is_dir,omitempty"`
	Etag        string `protobuf:"bytes,6,opt,name=etag,proto3" json:"etag,omitempty"`
	Checksum    string `protobuf:"bytes,7,opt,name=checksum,proto3" json:"checksum,omitempty"`
	DerefPath   string `protobuf:"bytes,8,opt,name=deref_path,json=derefPath,proto3" json:"deref_path,omitempty"`
	IsReadOnly  bool   `protobuf:"varint,9,opt,name=is_read_only,json=isReadOnly,proto3" json:"is_read_only,omitempty"`
	IsShareable bool   `protobuf:"varint,10,opt,name=is_shareable,json=isShareable,proto3" json:"is_shareable,omitempty"`
	Mime        string `protobuf:"bytes,11,opt,name=mime,proto3" json:"mime,omitempty"`
	Sys         []byte `protobuf:"bytes,12,opt,name=sys,proto3" json:"sys,omitempty"`
	TreeCount   uint64 `protobuf:"varint,13,opt,name=tree_count,json=treeCount,proto3" json:"tree_count,omitempty"`
	// EOS filesytem extended metadata records
	EosFile     string `protobuf:"bytes,14,opt,name=eos_file,json=eosFile,proto3" json:"eos_file,omitempty"`
	EosInstance string `protobuf:"bytes,15,opt,name=eos_instance,json=eosInstance,proto3" json:"eos_instance,omitempty"`
	// Share extended metadata records
	ShareTarget string `protobuf:"bytes,16,opt,name=share_target,json=shareTarget,proto3" json:"share_target,omitempty"`
	// Migration extended metadata records
	MigId                string   `protobuf:"bytes,17,opt,name=mig_id,json=migId,proto3" json:"mig_id,omitempty"`
	MigPath              string   `protobuf:"bytes,18,opt,name=mig_path,json=migPath,proto3" json:"mig_path,omitempty"`
	IsOcm                bool     `protobuf:"varint,19,opt,name=is_ocm,json=isOcm,proto3" json:"is_ocm,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Metadata) Reset()         { *m = Metadata{} }
func (m *Metadata) String() string { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()    {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{20}
}

func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metadata.Unmarshal(m, b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metadata.Marshal(b, m, deterministic)
}
func (m *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(m, src)
}
func (m *Metadata) XXX_Size() int {
	return xxx_messageInfo_Metadata.Size(m)
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

func (m *Metadata) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Metadata) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Metadata) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Metadata) GetMtime() uint64 {
	if m != nil {
		return m.Mtime
	}
	return 0
}

func (m *Metadata) GetIsDir() bool {
	if m != nil {
		return m.IsDir
	}
	return false
}

func (m *Metadata) GetEtag() string {
	if m != nil {
		return m.Etag
	}
	return ""
}

func (m *Metadata) GetChecksum() string {
	if m != nil {
		return m.Checksum
	}
	return ""
}

func (m *Metadata) GetDerefPath() string {
	if m != nil {
		return m.DerefPath
	}
	return ""
}

func (m *Metadata) GetIsReadOnly() bool {
	if m != nil {
		return m.IsReadOnly
	}
	return false
}

func (m *Metadata) GetIsShareable() bool {
	if m != nil {
		return m.IsShareable
	}
	return false
}

func (m *Metadata) GetMime() string {
	if m != nil {
		return m.Mime
	}
	return ""
}

func (m *Metadata) GetSys() []byte {
	if m != nil {
		return m.Sys
	}
	return nil
}

func (m *Metadata) GetTreeCount() uint64 {
	if m != nil {
		return m.TreeCount
	}
	return 0
}

func (m *Metadata) GetEosFile() string {
	if m != nil {
		return m.EosFile
	}
	return ""
}

func (m *Metadata) GetEosInstance() string {
	if m != nil {
		return m.EosInstance
	}
	return ""
}

func (m *Metadata) GetShareTarget() string {
	if m != nil {
		return m.ShareTarget
	}
	return ""
}

func (m *Metadata) GetMigId() string {
	if m != nil {
		return m.MigId
	}
	return ""
}

func (m *Metadata) GetMigPath() string {
	if m != nil {
		return m.MigPath
	}
	return ""
}

func (m *Metadata) GetIsOcm() bool {
	if m != nil {
		return m.IsOcm
	}
	return false
}

type PathReq struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PathReq) Reset()         { *m = PathReq{} }
func (m *PathReq) String() string { return proto.CompactTextString(m) }
func (*PathReq) ProtoMessage()    {}
func (*PathReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{21}
}

func (m *PathReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PathReq.Unmarshal(m, b)
}
func (m *PathReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PathReq.Marshal(b, m, deterministic)
}
func (m *PathReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PathReq.Merge(m, src)
}
func (m *PathReq) XXX_Size() int {
	return xxx_messageInfo_PathReq.Size(m)
}
func (m *PathReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PathReq.DiscardUnknown(m)
}

var xxx_messageInfo_PathReq proto.InternalMessageInfo

func (m *PathReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type PathLimitReq struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	From                 string   `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To                   string   `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PathLimitReq) Reset()         { *m = PathLimitReq{} }
func (m *PathLimitReq) String() string { return proto.CompactTextString(m) }
func (*PathLimitReq) ProtoMessage()    {}
func (*PathLimitReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{22}
}

func (m *PathLimitReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PathLimitReq.Unmarshal(m, b)
}
func (m *PathLimitReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PathLimitReq.Marshal(b, m, deterministic)
}
func (m *PathLimitReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PathLimitReq.Merge(m, src)
}
func (m *PathLimitReq) XXX_Size() int {
	return xxx_messageInfo_PathLimitReq.Size(m)
}
func (m *PathLimitReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PathLimitReq.DiscardUnknown(m)
}

var xxx_messageInfo_PathLimitReq proto.InternalMessageInfo

func (m *PathLimitReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *PathLimitReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *PathLimitReq) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

type MoveReq struct {
	OldPath              string   `protobuf:"bytes,1,opt,name=old_path,json=oldPath,proto3" json:"old_path,omitempty"`
	NewPath              string   `protobuf:"bytes,2,opt,name=new_path,json=newPath,proto3" json:"new_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MoveReq) Reset()         { *m = MoveReq{} }
func (m *MoveReq) String() string { return proto.CompactTextString(m) }
func (*MoveReq) ProtoMessage()    {}
func (*MoveReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{23}
}

func (m *MoveReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MoveReq.Unmarshal(m, b)
}
func (m *MoveReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MoveReq.Marshal(b, m, deterministic)
}
func (m *MoveReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoveReq.Merge(m, src)
}
func (m *MoveReq) XXX_Size() int {
	return xxx_messageInfo_MoveReq.Size(m)
}
func (m *MoveReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MoveReq.DiscardUnknown(m)
}

var xxx_messageInfo_MoveReq proto.InternalMessageInfo

func (m *MoveReq) GetOldPath() string {
	if m != nil {
		return m.OldPath
	}
	return ""
}

func (m *MoveReq) GetNewPath() string {
	if m != nil {
		return m.NewPath
	}
	return ""
}

// maybe add checksum data ?
type TxChunk struct {
	TxId                 string   `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Length               uint64   `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
	Offset               uint64   `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Data                 []byte   `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TxChunk) Reset()         { *m = TxChunk{} }
func (m *TxChunk) String() string { return proto.CompactTextString(m) }
func (*TxChunk) ProtoMessage()    {}
func (*TxChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{24}
}

func (m *TxChunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TxChunk.Unmarshal(m, b)
}
func (m *TxChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TxChunk.Marshal(b, m, deterministic)
}
func (m *TxChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxChunk.Merge(m, src)
}
func (m *TxChunk) XXX_Size() int {
	return xxx_messageInfo_TxChunk.Size(m)
}
func (m *TxChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_TxChunk.DiscardUnknown(m)
}

var xxx_messageInfo_TxChunk proto.InternalMessageInfo

func (m *TxChunk) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

func (m *TxChunk) GetLength() uint64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *TxChunk) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *TxChunk) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type WriteSummaryResponse struct {
	Status               StatusCode    `protobuf:"varint,1,opt,name=status,proto3,enum=api.StatusCode" json:"status,omitempty"`
	WriteSummary         *WriteSummary `protobuf:"bytes,2,opt,name=writeSummary,proto3" json:"writeSummary,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *WriteSummaryResponse) Reset()         { *m = WriteSummaryResponse{} }
func (m *WriteSummaryResponse) String() string { return proto.CompactTextString(m) }
func (*WriteSummaryResponse) ProtoMessage()    {}
func (*WriteSummaryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{25}
}

func (m *WriteSummaryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteSummaryResponse.Unmarshal(m, b)
}
func (m *WriteSummaryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteSummaryResponse.Marshal(b, m, deterministic)
}
func (m *WriteSummaryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteSummaryResponse.Merge(m, src)
}
func (m *WriteSummaryResponse) XXX_Size() int {
	return xxx_messageInfo_WriteSummaryResponse.Size(m)
}
func (m *WriteSummaryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteSummaryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WriteSummaryResponse proto.InternalMessageInfo

func (m *WriteSummaryResponse) GetStatus() StatusCode {
	if m != nil {
		return m.Status
	}
	return StatusCode_OK
}

func (m *WriteSummaryResponse) GetWriteSummary() *WriteSummary {
	if m != nil {
		return m.WriteSummary
	}
	return nil
}

type WriteSummary struct {
	Nchunks              uint64   `protobuf:"varint,1,opt,name=nchunks,proto3" json:"nchunks,omitempty"`
	TotalSize            uint64   `protobuf:"varint,2,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WriteSummary) Reset()         { *m = WriteSummary{} }
func (m *WriteSummary) String() string { return proto.CompactTextString(m) }
func (*WriteSummary) ProtoMessage()    {}
func (*WriteSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{26}
}

func (m *WriteSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteSummary.Unmarshal(m, b)
}
func (m *WriteSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteSummary.Marshal(b, m, deterministic)
}
func (m *WriteSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteSummary.Merge(m, src)
}
func (m *WriteSummary) XXX_Size() int {
	return xxx_messageInfo_WriteSummary.Size(m)
}
func (m *WriteSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteSummary.DiscardUnknown(m)
}

var xxx_messageInfo_WriteSummary proto.InternalMessageInfo

func (m *WriteSummary) GetNchunks() uint64 {
	if m != nil {
		return m.Nchunks
	}
	return 0
}

func (m *WriteSummary) GetTotalSize() uint64 {
	if m != nil {
		return m.TotalSize
	}
	return 0
}

type TxEnd struct {
	TxId                 string   `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Path                 string   `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Checksum             string   `protobuf:"bytes,3,opt,name=checksum,proto3" json:"checksum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TxEnd) Reset()         { *m = TxEnd{} }
func (m *TxEnd) String() string { return proto.CompactTextString(m) }
func (*TxEnd) ProtoMessage()    {}
func (*TxEnd) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{27}
}

func (m *TxEnd) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TxEnd.Unmarshal(m, b)
}
func (m *TxEnd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TxEnd.Marshal(b, m, deterministic)
}
func (m *TxEnd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxEnd.Merge(m, src)
}
func (m *TxEnd) XXX_Size() int {
	return xxx_messageInfo_TxEnd.Size(m)
}
func (m *TxEnd) XXX_DiscardUnknown() {
	xxx_messageInfo_TxEnd.DiscardUnknown(m)
}

var xxx_messageInfo_TxEnd proto.InternalMessageInfo

func (m *TxEnd) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

func (m *TxEnd) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *TxEnd) GetChecksum() string {
	if m != nil {
		return m.Checksum
	}
	return ""
}

type DataChunkResponse struct {
	Status               StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=api.StatusCode" json:"status,omitempty"`
	DataChunk            *DataChunk `protobuf:"bytes,2,opt,name=dataChunk,proto3" json:"dataChunk,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *DataChunkResponse) Reset()         { *m = DataChunkResponse{} }
func (m *DataChunkResponse) String() string { return proto.CompactTextString(m) }
func (*DataChunkResponse) ProtoMessage()    {}
func (*DataChunkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{28}
}

func (m *DataChunkResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataChunkResponse.Unmarshal(m, b)
}
func (m *DataChunkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataChunkResponse.Marshal(b, m, deterministic)
}
func (m *DataChunkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataChunkResponse.Merge(m, src)
}
func (m *DataChunkResponse) XXX_Size() int {
	return xxx_messageInfo_DataChunkResponse.Size(m)
}
func (m *DataChunkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DataChunkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DataChunkResponse proto.InternalMessageInfo

func (m *DataChunkResponse) GetStatus() StatusCode {
	if m != nil {
		return m.Status
	}
	return StatusCode_OK
}

func (m *DataChunkResponse) GetDataChunk() *DataChunk {
	if m != nil {
		return m.DataChunk
	}
	return nil
}

type DataChunk struct {
	Length               uint64   `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
	Offset               uint64   `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Data                 []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataChunk) Reset()         { *m = DataChunk{} }
func (m *DataChunk) String() string { return proto.CompactTextString(m) }
func (*DataChunk) ProtoMessage()    {}
func (*DataChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{29}
}

func (m *DataChunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataChunk.Unmarshal(m, b)
}
func (m *DataChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataChunk.Marshal(b, m, deterministic)
}
func (m *DataChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataChunk.Merge(m, src)
}
func (m *DataChunk) XXX_Size() int {
	return xxx_messageInfo_DataChunk.Size(m)
}
func (m *DataChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_DataChunk.DiscardUnknown(m)
}

var xxx_messageInfo_DataChunk proto.InternalMessageInfo

func (m *DataChunk) GetLength() uint64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *DataChunk) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *DataChunk) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type RevisionResponse struct {
	Status               StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=api.StatusCode" json:"status,omitempty"`
	Revision             *Revision  `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *RevisionResponse) Reset()         { *m = RevisionResponse{} }
func (m *RevisionResponse) String() string { return proto.CompactTextString(m) }
func (*RevisionResponse) ProtoMessage()    {}
func (*RevisionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{30}
}

func (m *RevisionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RevisionResponse.Unmarshal(m, b)
}
func (m *RevisionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RevisionResponse.Marshal(b, m, deterministic)
}
func (m *RevisionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevisionResponse.Merge(m, src)
}
func (m *RevisionResponse) XXX_Size() int {
	return xxx_messageInfo_RevisionResponse.Size(m)
}
func (m *RevisionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RevisionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RevisionResponse proto.InternalMessageInfo

func (m *RevisionResponse) GetStatus() StatusCode {
	if m != nil {
		return m.Status
	}
	return StatusCode_OK
}

func (m *RevisionResponse) GetRevision() *Revision {
	if m != nil {
		return m.Revision
	}
	return nil
}

type Revision struct {
	RevKey               string   `protobuf:"bytes,1,opt,name=rev_key,json=revKey,proto3" json:"rev_key,omitempty"`
	Size                 uint64   `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Mtime                uint64   `protobuf:"varint,3,opt,name=mtime,proto3" json:"mtime,omitempty"`
	IsDir                bool     `protobuf:"varint,4,opt,name=is_dir,json=isDir,proto3" json:"is_dir,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Revision) Reset()         { *m = Revision{} }
func (m *Revision) String() string { return proto.CompactTextString(m) }
func (*Revision) ProtoMessage()    {}
func (*Revision) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{31}
}

func (m *Revision) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Revision.Unmarshal(m, b)
}
func (m *Revision) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Revision.Marshal(b, m, deterministic)
}
func (m *Revision) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Revision.Merge(m, src)
}
func (m *Revision) XXX_Size() int {
	return xxx_messageInfo_Revision.Size(m)
}
func (m *Revision) XXX_DiscardUnknown() {
	xxx_messageInfo_Revision.DiscardUnknown(m)
}

var xxx_messageInfo_Revision proto.InternalMessageInfo

func (m *Revision) GetRevKey() string {
	if m != nil {
		return m.RevKey
	}
	return ""
}

func (m *Revision) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Revision) GetMtime() uint64 {
	if m != nil {
		return m.Mtime
	}
	return 0
}

func (m *Revision) GetIsDir() bool {
	if m != nil {
		return m.IsDir
	}
	return false
}

type RevisionReq struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	RevKey               string   `protobuf:"bytes,2,opt,name=rev_key,json=revKey,proto3" json:"rev_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RevisionReq) Reset()         { *m = RevisionReq{} }
func (m *RevisionReq) String() string { return proto.CompactTextString(m) }
func (*RevisionReq) ProtoMessage()    {}
func (*RevisionReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{32}
}

func (m *RevisionReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RevisionReq.Unmarshal(m, b)
}
func (m *RevisionReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RevisionReq.Marshal(b, m, deterministic)
}
func (m *RevisionReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevisionReq.Merge(m, src)
}
func (m *RevisionReq) XXX_Size() int {
	return xxx_messageInfo_RevisionReq.Size(m)
}
func (m *RevisionReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RevisionReq.DiscardUnknown(m)
}

var xxx_messageInfo_RevisionReq proto.InternalMessageInfo

func (m *RevisionReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *RevisionReq) GetRevKey() string {
	if m != nil {
		return m.RevKey
	}
	return ""
}

type RecycleEntryResponse struct {
	Status               StatusCode    `protobuf:"varint,1,opt,name=status,proto3,enum=api.StatusCode" json:"status,omitempty"`
	RecycleEntry         *RecycleEntry `protobuf:"bytes,2,opt,name=recycleEntry,proto3" json:"recycleEntry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *RecycleEntryResponse) Reset()         { *m = RecycleEntryResponse{} }
func (m *RecycleEntryResponse) String() string { return proto.CompactTextString(m) }
func (*RecycleEntryResponse) ProtoMessage()    {}
func (*RecycleEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{33}
}

func (m *RecycleEntryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecycleEntryResponse.Unmarshal(m, b)
}
func (m *RecycleEntryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecycleEntryResponse.Marshal(b, m, deterministic)
}
func (m *RecycleEntryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecycleEntryResponse.Merge(m, src)
}
func (m *RecycleEntryResponse) XXX_Size() int {
	return xxx_messageInfo_RecycleEntryResponse.Size(m)
}
func (m *RecycleEntryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecycleEntryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecycleEntryResponse proto.InternalMessageInfo

func (m *RecycleEntryResponse) GetStatus() StatusCode {
	if m != nil {
		return m.Status
	}
	return StatusCode_OK
}

func (m *RecycleEntryResponse) GetRecycleEntry() *RecycleEntry {
	if m != nil {
		return m.RecycleEntry
	}
	return nil
}

type RecycleEntry struct {
	RestorePath          string   `protobuf:"bytes,1,opt,name=restore_path,json=restorePath,proto3" json:"restore_path,omitempty"`
	RestoreKey           string   `protobuf:"bytes,2,opt,name=restore_key,json=restoreKey,proto3" json:"restore_key,omitempty"`
	Size                 uint64   `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	DelMtime             uint64   `protobuf:"varint,4,opt,name=del_mtime,json=delMtime,proto3" json:"del_mtime,omitempty"`
	IsDir                bool     `protobuf:"varint,5,opt,name=is_dir,json=isDir,proto3" json:"is_dir,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecycleEntry) Reset()         { *m = RecycleEntry{} }
func (m *RecycleEntry) String() string { return proto.CompactTextString(m) }
func (*RecycleEntry) ProtoMessage()    {}
func (*RecycleEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{34}
}

func (m *RecycleEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecycleEntry.Unmarshal(m, b)
}
func (m *RecycleEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecycleEntry.Marshal(b, m, deterministic)
}
func (m *RecycleEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecycleEntry.Merge(m, src)
}
func (m *RecycleEntry) XXX_Size() int {
	return xxx_messageInfo_RecycleEntry.Size(m)
}
func (m *RecycleEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_RecycleEntry.DiscardUnknown(m)
}

var xxx_messageInfo_RecycleEntry proto.InternalMessageInfo

func (m *RecycleEntry) GetRestorePath() string {
	if m != nil {
		return m.RestorePath
	}
	return ""
}

func (m *RecycleEntry) GetRestoreKey() string {
	if m != nil {
		return m.RestoreKey
	}
	return ""
}

func (m *RecycleEntry) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *RecycleEntry) GetDelMtime() uint64 {
	if m != nil {
		return m.DelMtime
	}
	return 0
}

func (m *RecycleEntry) GetIsDir() bool {
	if m != nil {
		return m.IsDir
	}
	return false
}

type RecycleEntryReq struct {
	RestoreKey           string   `protobuf:"bytes,1,opt,name=restore_key,json=restoreKey,proto3" json:"restore_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecycleEntryReq) Reset()         { *m = RecycleEntryReq{} }
func (m *RecycleEntryReq) String() string { return proto.CompactTextString(m) }
func (*RecycleEntryReq) ProtoMessage()    {}
func (*RecycleEntryReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{35}
}

func (m *RecycleEntryReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecycleEntryReq.Unmarshal(m, b)
}
func (m *RecycleEntryReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecycleEntryReq.Marshal(b, m, deterministic)
}
func (m *RecycleEntryReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecycleEntryReq.Merge(m, src)
}
func (m *RecycleEntryReq) XXX_Size() int {
	return xxx_messageInfo_RecycleEntryReq.Size(m)
}
func (m *RecycleEntryReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RecycleEntryReq.DiscardUnknown(m)
}

var xxx_messageInfo_RecycleEntryReq proto.InternalMessageInfo

func (m *RecycleEntryReq) GetRestoreKey() string {
	if m != nil {
		return m.RestoreKey
	}
	return ""
}

type LinkPermissions struct {
	Read                 bool     `protobuf:"varint,1,opt,name=read,proto3" json:"read,omitempty"`
	Write                bool     `protobuf:"varint,2,opt,name=write,proto3" json:"write,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LinkPermissions) Reset()         { *m = LinkPermissions{} }
func (m *LinkPermissions) String() string { return proto.CompactTextString(m) }
func (*LinkPermissions) ProtoMessage()    {}
func (*LinkPermissions) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{36}
}

func (m *LinkPermissions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LinkPermissions.Unmarshal(m, b)
}
func (m *LinkPermissions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LinkPermissions.Marshal(b, m, deterministic)
}
func (m *LinkPermissions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LinkPermissions.Merge(m, src)
}
func (m *LinkPermissions) XXX_Size() int {
	return xxx_messageInfo_LinkPermissions.Size(m)
}
func (m *LinkPermissions) XXX_DiscardUnknown() {
	xxx_messageInfo_LinkPermissions.DiscardUnknown(m)
}

var xxx_messageInfo_LinkPermissions proto.InternalMessageInfo

func (m *LinkPermissions) GetRead() bool {
	if m != nil {
		return m.Read
	}
	return false
}

func (m *LinkPermissions) GetWrite() bool {
	if m != nil {
		return m.Write
	}
	return false
}

type NewLinkReq struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	ReadOnly             bool     `protobuf:"varint,2,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	Password             string   `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Expires              uint64   `protobuf:"varint,4,opt,name=expires,proto3" json:"expires,omitempty"`
	DropOnly             bool     `protobuf:"varint,5,opt,name=drop_only,json=dropOnly,proto3" json:"drop_only,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewLinkReq) Reset()         { *m = NewLinkReq{} }
func (m *NewLinkReq) String() string { return proto.CompactTextString(m) }
func (*NewLinkReq) ProtoMessage()    {}
func (*NewLinkReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{37}
}

func (m *NewLinkReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewLinkReq.Unmarshal(m, b)
}
func (m *NewLinkReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewLinkReq.Marshal(b, m, deterministic)
}
func (m *NewLinkReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewLinkReq.Merge(m, src)
}
func (m *NewLinkReq) XXX_Size() int {
	return xxx_messageInfo_NewLinkReq.Size(m)
}
func (m *NewLinkReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NewLinkReq.DiscardUnknown(m)
}

var xxx_messageInfo_NewLinkReq proto.InternalMessageInfo

func (m *NewLinkReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *NewLinkReq) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

func (m *NewLinkReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *NewLinkReq) GetExpires() uint64 {
	if m != nil {
		return m.Expires
	}
	return 0
}

func (m *NewLinkReq) GetDropOnly() bool {
	if m != nil {
		return m.DropOnly
	}
	return false
}

type UpdateLinkReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UpdatePassword       bool     `protobuf:"varint,2,opt,name=update_password,json=updatePassword,proto3" json:"update_password,omitempty"`
	Password             string   `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	UpdateExpiration     bool     `protobuf:"varint,4,opt,name=update_expiration,json=updateExpiration,proto3" json:"update_expiration,omitempty"`
	Expiration           uint64   `protobuf:"varint,5,opt,name=expiration,proto3" json:"expiration,omitempty"`
	ReadOnly             bool     `protobuf:"varint,6,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	UpdateReadOnly       bool     `protobuf:"varint,7,opt,name=update_read_only,json=updateReadOnly,proto3" json:"update_read_only,omitempty"`
	DropOnly             bool     `protobuf:"varint,8,opt,name=drop_only,json=dropOnly,proto3" json:"drop_only,omitempty"`
	UpdateDropOnly       bool     `protobuf:"varint,9,opt,name=update_drop_only,json=updateDropOnly,proto3" json:"update_drop_only,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateLinkReq) Reset()         { *m = UpdateLinkReq{} }
func (m *UpdateLinkReq) String() string { return proto.CompactTextString(m) }
func (*UpdateLinkReq) ProtoMessage()    {}
func (*UpdateLinkReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{38}
}

func (m *UpdateLinkReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateLinkReq.Unmarshal(m, b)
}
func (m *UpdateLinkReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateLinkReq.Marshal(b, m, deterministic)
}
func (m *UpdateLinkReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateLinkReq.Merge(m, src)
}
func (m *UpdateLinkReq) XXX_Size() int {
	return xxx_messageInfo_UpdateLinkReq.Size(m)
}
func (m *UpdateLinkReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateLinkReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateLinkReq proto.InternalMessageInfo

func (m *UpdateLinkReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateLinkReq) GetUpdatePassword() bool {
	if m != nil {
		return m.UpdatePassword
	}
	return false
}

func (m *UpdateLinkReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *UpdateLinkReq) GetUpdateExpiration() bool {
	if m != nil {
		return m.UpdateExpiration
	}
	return false
}

func (m *UpdateLinkReq) GetExpiration() uint64 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

func (m *UpdateLinkReq) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

func (m *UpdateLinkReq) GetUpdateReadOnly() bool {
	if m != nil {
		return m.UpdateReadOnly
	}
	return false
}

func (m *UpdateLinkReq) GetDropOnly() bool {
	if m != nil {
		return m.DropOnly
	}
	return false
}

func (m *UpdateLinkReq) GetUpdateDropOnly() bool {
	if m != nil {
		return m.UpdateDropOnly
	}
	return false
}

type PublicLinkResponse struct {
	Status               StatusCode  `protobuf:"varint,1,opt,name=status,proto3,enum=api.StatusCode" json:"status,omitempty"`
	PublicLink           *PublicLink `protobuf:"bytes,2,opt,name=publicLink,proto3" json:"publicLink,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *PublicLinkResponse) Reset()         { *m = PublicLinkResponse{} }
func (m *PublicLinkResponse) String() string { return proto.CompactTextString(m) }
func (*PublicLinkResponse) ProtoMessage()    {}
func (*PublicLinkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{39}
}

func (m *PublicLinkResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicLinkResponse.Unmarshal(m, b)
}
func (m *PublicLinkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicLinkResponse.Marshal(b, m, deterministic)
}
func (m *PublicLinkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicLinkResponse.Merge(m, src)
}
func (m *PublicLinkResponse) XXX_Size() int {
	return xxx_messageInfo_PublicLinkResponse.Size(m)
}
func (m *PublicLinkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicLinkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PublicLinkResponse proto.InternalMessageInfo

func (m *PublicLinkResponse) GetStatus() StatusCode {
	if m != nil {
		return m.Status
	}
	return StatusCode_OK
}

func (m *PublicLinkResponse) GetPublicLink() *PublicLink {
	if m != nil {
		return m.PublicLink
	}
	return nil
}

type ShareRecipient struct {
	Identity             string                       `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Type                 ShareRecipient_RecipientType `protobuf:"varint,2,opt,name=type,proto3,enum=api.ShareRecipient_RecipientType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *ShareRecipient) Reset()         { *m = ShareRecipient{} }
func (m *ShareRecipient) String() string { return proto.CompactTextString(m) }
func (*ShareRecipient) ProtoMessage()    {}
func (*ShareRecipient) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{40}
}

func (m *ShareRecipient) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShareRecipient.Unmarshal(m, b)
}
func (m *ShareRecipient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShareRecipient.Marshal(b, m, deterministic)
}
func (m *ShareRecipient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareRecipient.Merge(m, src)
}
func (m *ShareRecipient) XXX_Size() int {
	return xxx_messageInfo_ShareRecipient.Size(m)
}
func (m *ShareRecipient) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareRecipient.DiscardUnknown(m)
}

var xxx_messageInfo_ShareRecipient proto.InternalMessageInfo

func (m *ShareRecipient) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *ShareRecipient) GetType() ShareRecipient_RecipientType {
	if m != nil {
		return m.Type
	}
	return ShareRecipient_USER
}

type ACLReq struct {
	Path                 string          `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Recipient            *ShareRecipient `protobuf:"bytes,2,opt,name=recipient,proto3" json:"recipient,omitempty"`
	ReadOnly             bool            `protobuf:"varint,3,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	Shares               []*FolderShare  `protobuf:"bytes,4,rep,name=shares,proto3" json:"shares,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ACLReq) Reset()         { *m = ACLReq{} }
func (m *ACLReq) String() string { return proto.CompactTextString(m) }
func (*ACLReq) ProtoMessage()    {}
func (*ACLReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{41}
}

func (m *ACLReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ACLReq.Unmarshal(m, b)
}
func (m *ACLReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ACLReq.Marshal(b, m, deterministic)
}
func (m *ACLReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACLReq.Merge(m, src)
}
func (m *ACLReq) XXX_Size() int {
	return xxx_messageInfo_ACLReq.Size(m)
}
func (m *ACLReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ACLReq.DiscardUnknown(m)
}

var xxx_messageInfo_ACLReq proto.InternalMessageInfo

func (m *ACLReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ACLReq) GetRecipient() *ShareRecipient {
	if m != nil {
		return m.Recipient
	}
	return nil
}

func (m *ACLReq) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

func (m *ACLReq) GetShares() []*FolderShare {
	if m != nil {
		return m.Shares
	}
	return nil
}

type PublicLink struct {
	Id                   string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Token                string              `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Path                 string              `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Protected            bool                `protobuf:"varint,4,opt,name=protected,proto3" json:"protected,omitempty"`
	Expires              uint64              `protobuf:"varint,5,opt,name=expires,proto3" json:"expires,omitempty"`
	ReadOnly             bool                `protobuf:"varint,6,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	Mtime                uint64              `protobuf:"varint,7,opt,name=mtime,proto3" json:"mtime,omitempty"`
	ItemType             PublicLink_ItemType `protobuf:"varint,8,opt,name=item_type,json=itemType,proto3,enum=api.PublicLink_ItemType" json:"item_type,omitempty"`
	OwnerId              string              `protobuf:"bytes,9,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	Name                 string              `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	DropOnly             bool                `protobuf:"varint,11,opt,name=drop_only,json=dropOnly,proto3" json:"drop_only,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PublicLink) Reset()         { *m = PublicLink{} }
func (m *PublicLink) String() string { return proto.CompactTextString(m) }
func (*PublicLink) ProtoMessage()    {}
func (*PublicLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{42}
}

func (m *PublicLink) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicLink.Unmarshal(m, b)
}
func (m *PublicLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicLink.Marshal(b, m, deterministic)
}
func (m *PublicLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicLink.Merge(m, src)
}
func (m *PublicLink) XXX_Size() int {
	return xxx_messageInfo_PublicLink.Size(m)
}
func (m *PublicLink) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicLink.DiscardUnknown(m)
}

var xxx_messageInfo_PublicLink proto.InternalMessageInfo

func (m *PublicLink) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PublicLink) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *PublicLink) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *PublicLink) GetProtected() bool {
	if m != nil {
		return m.Protected
	}
	return false
}

func (m *PublicLink) GetExpires() uint64 {
	if m != nil {
		return m.Expires
	}
	return 0
}

func (m *PublicLink) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

func (m *PublicLink) GetMtime() uint64 {
	if m != nil {
		return m.Mtime
	}
	return 0
}

func (m *PublicLink) GetItemType() PublicLink_ItemType {
	if m != nil {
		return m.ItemType
	}
	return PublicLink_FILE
}

func (m *PublicLink) GetOwnerId() string {
	if m != nil {
		return m.OwnerId
	}
	return ""
}

func (m *PublicLink) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PublicLink) GetDropOnly() bool {
	if m != nil {
		return m.DropOnly
	}
	return false
}

type PublicLinkTokenReq struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublicLinkTokenReq) Reset()         { *m = PublicLinkTokenReq{} }
func (m *PublicLinkTokenReq) String() string { return proto.CompactTextString(m) }
func (*PublicLinkTokenReq) ProtoMessage()    {}
func (*PublicLinkTokenReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{43}
}

func (m *PublicLinkTokenReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicLinkTokenReq.Unmarshal(m, b)
}
func (m *PublicLinkTokenReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicLinkTokenReq.Marshal(b, m, deterministic)
}
func (m *PublicLinkTokenReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicLinkTokenReq.Merge(m, src)
}
func (m *PublicLinkTokenReq) XXX_Size() int {
	return xxx_messageInfo_PublicLinkTokenReq.Size(m)
}
func (m *PublicLinkTokenReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicLinkTokenReq.DiscardUnknown(m)
}

var xxx_messageInfo_PublicLinkTokenReq proto.InternalMessageInfo

func (m *PublicLinkTokenReq) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type ShareIDReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShareIDReq) Reset()         { *m = ShareIDReq{} }
func (m *ShareIDReq) String() string { return proto.CompactTextString(m) }
func (*ShareIDReq) ProtoMessage()    {}
func (*ShareIDReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{44}
}

func (m *ShareIDReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShareIDReq.Unmarshal(m, b)
}
func (m *ShareIDReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShareIDReq.Marshal(b, m, deterministic)
}
func (m *ShareIDReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareIDReq.Merge(m, src)
}
func (m *ShareIDReq) XXX_Size() int {
	return xxx_messageInfo_ShareIDReq.Size(m)
}
func (m *ShareIDReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareIDReq.DiscardUnknown(m)
}

var xxx_messageInfo_ShareIDReq proto.InternalMessageInfo

func (m *ShareIDReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type FolderShareResponse struct {
	Status               StatusCode   `protobuf:"varint,1,opt,name=status,proto3,enum=api.StatusCode" json:"status,omitempty"`
	FolderShare          *FolderShare `protobuf:"bytes,2,opt,name=folderShare,proto3" json:"folderShare,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *FolderShareResponse) Reset()         { *m = FolderShareResponse{} }
func (m *FolderShareResponse) String() string { return proto.CompactTextString(m) }
func (*FolderShareResponse) ProtoMessage()    {}
func (*FolderShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{45}
}

func (m *FolderShareResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FolderShareResponse.Unmarshal(m, b)
}
func (m *FolderShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FolderShareResponse.Marshal(b, m, deterministic)
}
func (m *FolderShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FolderShareResponse.Merge(m, src)
}
func (m *FolderShareResponse) XXX_Size() int {
	return xxx_messageInfo_FolderShareResponse.Size(m)
}
func (m *FolderShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FolderShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FolderShareResponse proto.InternalMessageInfo

func (m *FolderShareResponse) GetStatus() StatusCode {
	if m != nil {
		return m.Status
	}
	return StatusCode_OK
}

func (m *FolderShareResponse) GetFolderShare() *FolderShare {
	if m != nil {
		return m.FolderShare
	}
	return nil
}

type FolderShare struct {
	Id                   string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Path                 string            `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	OwnerId              string            `protobuf:"bytes,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	Recipient            *ShareRecipient   `protobuf:"bytes,4,opt,name=recipient,proto3" json:"recipient,omitempty"`
	ReadOnly             bool              `protobuf:"varint,5,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	Ctime                uint64            `protobuf:"varint,6,opt,name=ctime,proto3" json:"ctime,omitempty"`
	Mtime                uint64            `protobuf:"varint,7,opt,name=mtime,proto3" json:"mtime,omitempty"`
	Target               string            `protobuf:"bytes,8,opt,name=target,proto3" json:"target,omitempty"`
	State                FolderShare_State `protobuf:"varint,9,opt,name=state,proto3,enum=api.FolderShare_State" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *FolderShare) Reset()         { *m = FolderShare{} }
func (m *FolderShare) String() string { return proto.CompactTextString(m) }
func (*FolderShare) ProtoMessage()    {}
func (*FolderShare) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{46}
}

func (m *FolderShare) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FolderShare.Unmarshal(m, b)
}
func (m *FolderShare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FolderShare.Marshal(b, m, deterministic)
}
func (m *FolderShare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FolderShare.Merge(m, src)
}
func (m *FolderShare) XXX_Size() int {
	return xxx_messageInfo_FolderShare.Size(m)
}
func (m *FolderShare) XXX_DiscardUnknown() {
	xxx_messageInfo_FolderShare.DiscardUnknown(m)
}

var xxx_messageInfo_FolderShare proto.InternalMessageInfo

func (m *FolderShare) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FolderShare) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *FolderShare) GetOwnerId() string {
	if m != nil {
		return m.OwnerId
	}
	return ""
}

func (m *FolderShare) GetRecipient() *ShareRecipient {
	if m != nil {
		return m.Recipient
	}
	return nil
}

func (m *FolderShare) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

func (m *FolderShare) GetCtime() uint64 {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *FolderShare) GetMtime() uint64 {
	if m != nil {
		return m.Mtime
	}
	return 0
}

func (m *FolderShare) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *FolderShare) GetState() FolderShare_State {
	if m != nil {
		return m.State
	}
	return FolderShare_ACCEPTED
}

type OCMShareResponse struct {
	Status               StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=api.StatusCode" json:"status,omitempty"`
	OcmShare             *OCMShare  `protobuf:"bytes,2,opt,name=ocmShare,proto3" json:"ocmShare,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *OCMShareResponse) Reset()         { *m = OCMShareResponse{} }
func (m *OCMShareResponse) String() string { return proto.CompactTextString(m) }
func (*OCMShareResponse) ProtoMessage()    {}
func (*OCMShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{47}
}

func (m *OCMShareResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OCMShareResponse.Unmarshal(m, b)
}
func (m *OCMShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OCMShareResponse.Marshal(b, m, deterministic)
}
func (m *OCMShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OCMShareResponse.Merge(m, src)
}
func (m *OCMShareResponse) XXX_Size() int {
	return xxx_messageInfo_OCMShareResponse.Size(m)
}
func (m *OCMShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OCMShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OCMShareResponse proto.InternalMessageInfo

func (m *OCMShareResponse) GetStatus() StatusCode {
	if m != nil {
		return m.Status
	}
	return StatusCode_OK
}

func (m *OCMShareResponse) GetOcmShare() *OCMShare {
	if m != nil {
		return m.OcmShare
	}
	return nil
}

type OCMShare struct {
	Id                   string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Path                 string         `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	OwnerId              string         `protobuf:"bytes,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	Recipient            string         `protobuf:"bytes,4,opt,name=recipient,proto3" json:"recipient,omitempty"`
	ReadOnly             bool           `protobuf:"varint,5,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	Ctime                uint64         `protobuf:"varint,6,opt,name=ctime,proto3" json:"ctime,omitempty"`
	Mtime                uint64         `protobuf:"varint,7,opt,name=mtime,proto3" json:"mtime,omitempty"`
	Target               string         `protobuf:"bytes,8,opt,name=target,proto3" json:"target,omitempty"`
	State                OCMShare_State `protobuf:"varint,9,opt,name=state,proto3,enum=api.OCMShare_State" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *OCMShare) Reset()         { *m = OCMShare{} }
func (m *OCMShare) String() string { return proto.CompactTextString(m) }
func (*OCMShare) ProtoMessage()    {}
func (*OCMShare) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{48}
}

func (m *OCMShare) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OCMShare.Unmarshal(m, b)
}
func (m *OCMShare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OCMShare.Marshal(b, m, deterministic)
}
func (m *OCMShare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OCMShare.Merge(m, src)
}
func (m *OCMShare) XXX_Size() int {
	return xxx_messageInfo_OCMShare.Size(m)
}
func (m *OCMShare) XXX_DiscardUnknown() {
	xxx_messageInfo_OCMShare.DiscardUnknown(m)
}

var xxx_messageInfo_OCMShare proto.InternalMessageInfo

func (m *OCMShare) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *OCMShare) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *OCMShare) GetOwnerId() string {
	if m != nil {
		return m.OwnerId
	}
	return ""
}

func (m *OCMShare) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *OCMShare) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

func (m *OCMShare) GetCtime() uint64 {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *OCMShare) GetMtime() uint64 {
	if m != nil {
		return m.Mtime
	}
	return 0
}

func (m *OCMShare) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *OCMShare) GetState() OCMShare_State {
	if m != nil {
		return m.State
	}
	return OCMShare_ACCEPTED
}

type ReceivedShareResponse struct {
	Status               StatusCode   `protobuf:"varint,1,opt,name=status,proto3,enum=api.StatusCode" json:"status,omitempty"`
	Share                *FolderShare `protobuf:"bytes,2,opt,name=share,proto3" json:"share,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ReceivedShareResponse) Reset()         { *m = ReceivedShareResponse{} }
func (m *ReceivedShareResponse) String() string { return proto.CompactTextString(m) }
func (*ReceivedShareResponse) ProtoMessage()    {}
func (*ReceivedShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{49}
}

func (m *ReceivedShareResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReceivedShareResponse.Unmarshal(m, b)
}
func (m *ReceivedShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReceivedShareResponse.Marshal(b, m, deterministic)
}
func (m *ReceivedShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReceivedShareResponse.Merge(m, src)
}
func (m *ReceivedShareResponse) XXX_Size() int {
	return xxx_messageInfo_ReceivedShareResponse.Size(m)
}
func (m *ReceivedShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReceivedShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReceivedShareResponse proto.InternalMessageInfo

func (m *ReceivedShareResponse) GetStatus() StatusCode {
	if m != nil {
		return m.Status
	}
	return StatusCode_OK
}

func (m *ReceivedShareResponse) GetShare() *FolderShare {
	if m != nil {
		return m.Share
	}
	return nil
}

type NewFolderShareReq struct {
	Path                 string          `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Recipient            *ShareRecipient `protobuf:"bytes,2,opt,name=recipient,proto3" json:"recipient,omitempty"`
	ReadOnly             bool            `protobuf:"varint,3,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *NewFolderShareReq) Reset()         { *m = NewFolderShareReq{} }
func (m *NewFolderShareReq) String() string { return proto.CompactTextString(m) }
func (*NewFolderShareReq) ProtoMessage()    {}
func (*NewFolderShareReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{50}
}

func (m *NewFolderShareReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewFolderShareReq.Unmarshal(m, b)
}
func (m *NewFolderShareReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewFolderShareReq.Marshal(b, m, deterministic)
}
func (m *NewFolderShareReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewFolderShareReq.Merge(m, src)
}
func (m *NewFolderShareReq) XXX_Size() int {
	return xxx_messageInfo_NewFolderShareReq.Size(m)
}
func (m *NewFolderShareReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NewFolderShareReq.DiscardUnknown(m)
}

var xxx_messageInfo_NewFolderShareReq proto.InternalMessageInfo

func (m *NewFolderShareReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *NewFolderShareReq) GetRecipient() *ShareRecipient {
	if m != nil {
		return m.Recipient
	}
	return nil
}

func (m *NewFolderShareReq) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

type NewOCMReq struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Recipient            string   `protobuf:"bytes,2,opt,name=recipient,proto3" json:"recipient,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewOCMReq) Reset()         { *m = NewOCMReq{} }
func (m *NewOCMReq) String() string { return proto.CompactTextString(m) }
func (*NewOCMReq) ProtoMessage()    {}
func (*NewOCMReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{51}
}

func (m *NewOCMReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewOCMReq.Unmarshal(m, b)
}
func (m *NewOCMReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewOCMReq.Marshal(b, m, deterministic)
}
func (m *NewOCMReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewOCMReq.Merge(m, src)
}
func (m *NewOCMReq) XXX_Size() int {
	return xxx_messageInfo_NewOCMReq.Size(m)
}
func (m *NewOCMReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NewOCMReq.DiscardUnknown(m)
}

var xxx_messageInfo_NewOCMReq proto.InternalMessageInfo

func (m *NewOCMReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *NewOCMReq) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

type UpdateFolderShareReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UpdateReadOnly       bool     `protobuf:"varint,2,opt,name=update_read_only,json=updateReadOnly,proto3" json:"update_read_only,omitempty"`
	ReadOnly             bool     `protobuf:"varint,3,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateFolderShareReq) Reset()         { *m = UpdateFolderShareReq{} }
func (m *UpdateFolderShareReq) String() string { return proto.CompactTextString(m) }
func (*UpdateFolderShareReq) ProtoMessage()    {}
func (*UpdateFolderShareReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{52}
}

func (m *UpdateFolderShareReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateFolderShareReq.Unmarshal(m, b)
}
func (m *UpdateFolderShareReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateFolderShareReq.Marshal(b, m, deterministic)
}
func (m *UpdateFolderShareReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateFolderShareReq.Merge(m, src)
}
func (m *UpdateFolderShareReq) XXX_Size() int {
	return xxx_messageInfo_UpdateFolderShareReq.Size(m)
}
func (m *UpdateFolderShareReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateFolderShareReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateFolderShareReq proto.InternalMessageInfo

func (m *UpdateFolderShareReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateFolderShareReq) GetUpdateReadOnly() bool {
	if m != nil {
		return m.UpdateReadOnly
	}
	return false
}

func (m *UpdateFolderShareReq) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

type UnshareFolderReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnshareFolderReq) Reset()         { *m = UnshareFolderReq{} }
func (m *UnshareFolderReq) String() string { return proto.CompactTextString(m) }
func (*UnshareFolderReq) ProtoMessage()    {}
func (*UnshareFolderReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{53}
}

func (m *UnshareFolderReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnshareFolderReq.Unmarshal(m, b)
}
func (m *UnshareFolderReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnshareFolderReq.Marshal(b, m, deterministic)
}
func (m *UnshareFolderReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnshareFolderReq.Merge(m, src)
}
func (m *UnshareFolderReq) XXX_Size() int {
	return xxx_messageInfo_UnshareFolderReq.Size(m)
}
func (m *UnshareFolderReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UnshareFolderReq.DiscardUnknown(m)
}

var xxx_messageInfo_UnshareFolderReq proto.InternalMessageInfo

func (m *UnshareFolderReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ListPublicLinksReq struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListPublicLinksReq) Reset()         { *m = ListPublicLinksReq{} }
func (m *ListPublicLinksReq) String() string { return proto.CompactTextString(m) }
func (*ListPublicLinksReq) ProtoMessage()    {}
func (*ListPublicLinksReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{54}
}

func (m *ListPublicLinksReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPublicLinksReq.Unmarshal(m, b)
}
func (m *ListPublicLinksReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPublicLinksReq.Marshal(b, m, deterministic)
}
func (m *ListPublicLinksReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPublicLinksReq.Merge(m, src)
}
func (m *ListPublicLinksReq) XXX_Size() int {
	return xxx_messageInfo_ListPublicLinksReq.Size(m)
}
func (m *ListPublicLinksReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPublicLinksReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListPublicLinksReq proto.InternalMessageInfo

func (m *ListPublicLinksReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type ListFolderSharesReq struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListFolderSharesReq) Reset()         { *m = ListFolderSharesReq{} }
func (m *ListFolderSharesReq) String() string { return proto.CompactTextString(m) }
func (*ListFolderSharesReq) ProtoMessage()    {}
func (*ListFolderSharesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{55}
}

func (m *ListFolderSharesReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListFolderSharesReq.Unmarshal(m, b)
}
func (m *ListFolderSharesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListFolderSharesReq.Marshal(b, m, deterministic)
}
func (m *ListFolderSharesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListFolderSharesReq.Merge(m, src)
}
func (m *ListFolderSharesReq) XXX_Size() int {
	return xxx_messageInfo_ListFolderSharesReq.Size(m)
}
func (m *ListFolderSharesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListFolderSharesReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListFolderSharesReq proto.InternalMessageInfo

func (m *ListFolderSharesReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type ListOCMSharesReq struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListOCMSharesReq) Reset()         { *m = ListOCMSharesReq{} }
func (m *ListOCMSharesReq) String() string { return proto.CompactTextString(m) }
func (*ListOCMSharesReq) ProtoMessage()    {}
func (*ListOCMSharesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{56}
}

func (m *ListOCMSharesReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListOCMSharesReq.Unmarshal(m, b)
}
func (m *ListOCMSharesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListOCMSharesReq.Marshal(b, m, deterministic)
}
func (m *ListOCMSharesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListOCMSharesReq.Merge(m, src)
}
func (m *ListOCMSharesReq) XXX_Size() int {
	return xxx_messageInfo_ListOCMSharesReq.Size(m)
}
func (m *ListOCMSharesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListOCMSharesReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListOCMSharesReq proto.InternalMessageInfo

func (m *ListOCMSharesReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type ReceivedShareReq struct {
	ShareId              string   `protobuf:"bytes,1,opt,name=share_id,json=shareId,proto3" json:"share_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReceivedShareReq) Reset()         { *m = ReceivedShareReq{} }
func (m *ReceivedShareReq) String() string { return proto.CompactTextString(m) }
func (*ReceivedShareReq) ProtoMessage()    {}
func (*ReceivedShareReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{57}
}

func (m *ReceivedShareReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReceivedShareReq.Unmarshal(m, b)
}
func (m *ReceivedShareReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReceivedShareReq.Marshal(b, m, deterministic)
}
func (m *ReceivedShareReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReceivedShareReq.Merge(m, src)
}
func (m *ReceivedShareReq) XXX_Size() int {
	return xxx_messageInfo_ReceivedShareReq.Size(m)
}
func (m *ReceivedShareReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ReceivedShareReq.DiscardUnknown(m)
}

var xxx_messageInfo_ReceivedShareReq proto.InternalMessageInfo

func (m *ReceivedShareReq) GetShareId() string {
	if m != nil {
		return m.ShareId
	}
	return ""
}

type Provider struct {
	Domain               string   `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Provider) Reset()         { *m = Provider{} }
func (m *Provider) String() string { return proto.CompactTextString(m) }
func (*Provider) ProtoMessage()    {}
func (*Provider) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{58}
}

func (m *Provider) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Provider.Unmarshal(m, b)
}
func (m *Provider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Provider.Marshal(b, m, deterministic)
}
func (m *Provider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Provider.Merge(m, src)
}
func (m *Provider) XXX_Size() int {
	return xxx_messageInfo_Provider.Size(m)
}
func (m *Provider) XXX_DiscardUnknown() {
	xxx_messageInfo_Provider.DiscardUnknown(m)
}

var xxx_messageInfo_Provider proto.InternalMessageInfo

func (m *Provider) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

type ProvidersResponse struct {
	Status               StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=api.StatusCode" json:"status,omitempty"`
	Provider             *Provider  `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ProvidersResponse) Reset()         { *m = ProvidersResponse{} }
func (m *ProvidersResponse) String() string { return proto.CompactTextString(m) }
func (*ProvidersResponse) ProtoMessage()    {}
func (*ProvidersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{59}
}

func (m *ProvidersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProvidersResponse.Unmarshal(m, b)
}
func (m *ProvidersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProvidersResponse.Marshal(b, m, deterministic)
}
func (m *ProvidersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProvidersResponse.Merge(m, src)
}
func (m *ProvidersResponse) XXX_Size() int {
	return xxx_messageInfo_ProvidersResponse.Size(m)
}
func (m *ProvidersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProvidersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProvidersResponse proto.InternalMessageInfo

func (m *ProvidersResponse) GetStatus() StatusCode {
	if m != nil {
		return m.Status
	}
	return StatusCode_OK
}

func (m *ProvidersResponse) GetProvider() *Provider {
	if m != nil {
		return m.Provider
	}
	return nil
}

func init() {
	proto.RegisterEnum("api.StatusCode", StatusCode_name, StatusCode_value)
	proto.RegisterEnum("api.Tag_ItemType", Tag_ItemType_name, Tag_ItemType_value)
	proto.RegisterEnum("api.ShareRecipient_RecipientType", ShareRecipient_RecipientType_name, ShareRecipient_RecipientType_value)
	proto.RegisterEnum("api.PublicLink_ItemType", PublicLink_ItemType_name, PublicLink_ItemType_value)
	proto.RegisterEnum("api.FolderShare_State", FolderShare_State_name, FolderShare_State_value)
	proto.RegisterEnum("api.OCMShare_State", OCMShare_State_name, OCMShare_State_value)
	proto.RegisterType((*TagReq)(nil), "api.TagReq")
	proto.RegisterType((*Tag)(nil), "api.Tag")
	proto.RegisterType((*TagResponse)(nil), "api.TagResponse")
	proto.RegisterType((*IsPublicLinkProtectedResponse)(nil), "api.IsPublicLinkProtectedResponse")
	proto.RegisterType((*ForgePublicLinkTokenReq)(nil), "api.ForgePublicLinkTokenReq")
	proto.RegisterType((*ForgePublicLinkTokenResponse)(nil), "api.ForgePublicLinkTokenResponse")
	proto.RegisterType((*VerifyPublicLinkTokenReq)(nil), "api.VerifyPublicLinkTokenReq")
	proto.RegisterType((*VerifyPublicLinkTokenResponse)(nil), "api.VerifyPublicLinkTokenResponse")
	proto.RegisterType((*EmptyResponse)(nil), "api.EmptyResponse")
	proto.RegisterType((*EmptyReq)(nil), "api.EmptyReq")
	proto.RegisterType((*QuotaReq)(nil), "api.QuotaReq")
	proto.RegisterType((*QuotaResponse)(nil), "api.QuotaResponse")
	proto.RegisterType((*UserResponse)(nil), "api.UserResponse")
	proto.RegisterType((*User)(nil), "api.User")
	proto.RegisterType((*TxInfoResponse)(nil), "api.TxInfoResponse")
	proto.RegisterType((*TxInfo)(nil), "api.TxInfo")
	proto.RegisterType((*ForgeUserTokenReq)(nil), "api.ForgeUserTokenReq")
	proto.RegisterType((*TokenResponse)(nil), "api.TokenResponse")
	proto.RegisterType((*TokenReq)(nil), "api.TokenReq")
	proto.RegisterType((*MetadataResponse)(nil), "api.MetadataResponse")
	proto.RegisterType((*Metadata)(nil), "api.Metadata")
	proto.RegisterType((*PathReq)(nil), "api.PathReq")
	proto.RegisterType((*PathLimitReq)(nil), "api.PathLimitReq")
	proto.RegisterType((*MoveReq)(nil), "api.MoveReq")
	proto.RegisterType((*TxChunk)(nil), "api.TxChunk")
	proto.RegisterType((*WriteSummaryResponse)(nil), "api.WriteSummaryResponse")
	proto.RegisterType((*WriteSummary)(nil), "api.WriteSummary")
	proto.RegisterType((*TxEnd)(nil), "api.TxEnd")
	proto.RegisterType((*DataChunkResponse)(nil), "api.DataChunkResponse")
	proto.RegisterType((*DataChunk)(nil), "api.DataChunk")
	proto.RegisterType((*RevisionResponse)(nil), "api.RevisionResponse")
	proto.RegisterType((*Revision)(nil), "api.Revision")
	proto.RegisterType((*RevisionReq)(nil), "api.RevisionReq")
	proto.RegisterType((*RecycleEntryResponse)(nil), "api.RecycleEntryResponse")
	proto.RegisterType((*RecycleEntry)(nil), "api.RecycleEntry")
	proto.RegisterType((*RecycleEntryReq)(nil), "api.RecycleEntryReq")
	proto.RegisterType((*LinkPermissions)(nil), "api.LinkPermissions")
	proto.RegisterType((*NewLinkReq)(nil), "api.NewLinkReq")
	proto.RegisterType((*UpdateLinkReq)(nil), "api.UpdateLinkReq")
	proto.RegisterType((*PublicLinkResponse)(nil), "api.PublicLinkResponse")
	proto.RegisterType((*ShareRecipient)(nil), "api.ShareRecipient")
	proto.RegisterType((*ACLReq)(nil), "api.ACLReq")
	proto.RegisterType((*PublicLink)(nil), "api.PublicLink")
	proto.RegisterType((*PublicLinkTokenReq)(nil), "api.PublicLinkTokenReq")
	proto.RegisterType((*ShareIDReq)(nil), "api.ShareIDReq")
	proto.RegisterType((*FolderShareResponse)(nil), "api.FolderShareResponse")
	proto.RegisterType((*FolderShare)(nil), "api.FolderShare")
	proto.RegisterType((*OCMShareResponse)(nil), "api.OCMShareResponse")
	proto.RegisterType((*OCMShare)(nil), "api.OCMShare")
	proto.RegisterType((*ReceivedShareResponse)(nil), "api.ReceivedShareResponse")
	proto.RegisterType((*NewFolderShareReq)(nil), "api.NewFolderShareReq")
	proto.RegisterType((*NewOCMReq)(nil), "api.NewOCMReq")
	proto.RegisterType((*UpdateFolderShareReq)(nil), "api.UpdateFolderShareReq")
	proto.RegisterType((*UnshareFolderReq)(nil), "api.UnshareFolderReq")
	proto.RegisterType((*ListPublicLinksReq)(nil), "api.ListPublicLinksReq")
	proto.RegisterType((*ListFolderSharesReq)(nil), "api.ListFolderSharesReq")
	proto.RegisterType((*ListOCMSharesReq)(nil), "api.ListOCMSharesReq")
	proto.RegisterType((*ReceivedShareReq)(nil), "api.ReceivedShareReq")
	proto.RegisterType((*Provider)(nil), "api.Provider")
	proto.RegisterType((*ProvidersResponse)(nil), "api.ProvidersResponse")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 2967 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x3a, 0xdb, 0x72, 0xe3, 0xc6,
	0xb1, 0xe2, 0x1d, 0x6c, 0x5e, 0x04, 0x8d, 0xb4, 0x32, 0x57, 0xab, 0xb5, 0xd7, 0xf0, 0x29, 0x7b,
	0xd7, 0x5e, 0xcb, 0xb2, 0x8e, 0x37, 0xb1, 0x9d, 0xd8, 0x2e, 0x9a, 0xa4, 0x64, 0x7a, 0x25, 0x92,
	0x06, 0xa9, 0xb5, 0xf3, 0x90, 0x20, 0x58, 0x62, 0x44, 0x4d, 0x44, 0x02, 0x5c, 0x00, 0xd4, 0xc5,
	0x5f, 0x91, 0x72, 0xaa, 0xf2, 0x90, 0xf7, 0x7c, 0x47, 0xf2, 0x15, 0xa9, 0xfc, 0x41, 0xde, 0xf2,
	0x90, 0x1f, 0x48, 0x6a, 0x2e, 0x00, 0x06, 0x20, 0x29, 0x4b, 0x72, 0x95, 0xdf, 0x30, 0xdd, 0x3d,
	0x7d, 0x9b, 0xee, 0x9e, 0x9e, 0x26, 0xa1, 0x68, 0x4e, 0xc9, 0xce, 0xd4, 0x75, 0x7c, 0x07, 0x65,
	0xcc, 0x29, 0xd1, 0x3a, 0x90, 0x1f, 0x98, 0x23, 0x1d, 0xbf, 0x42, 0xaf, 0x41, 0xc1, 0x37, 0x47,
	0xc6, 0x19, 0xbe, 0xaa, 0xa5, 0x1e, 0xa5, 0x1e, 0x17, 0xf5, 0xbc, 0x6f, 0x8e, 0x9e, 0xe3, 0xab,
	0x00, 0x71, 0x6e, 0x8e, 0x6b, 0xe9, 0x10, 0xf1, 0xc2, 0x1c, 0x23, 0x04, 0xd9, 0xa9, 0xe9, 0x9f,
	0xd6, 0x32, 0x0c, 0xca, 0xbe, 0xb5, 0x7f, 0xa7, 0x20, 0x33, 0x30, 0x47, 0xa8, 0x0a, 0x69, 0x62,
	0x31, 0x46, 0x19, 0x3d, 0x4d, 0x2c, 0xb4, 0x03, 0x45, 0xe2, 0xe3, 0x89, 0xe1, 0x5f, 0x4d, 0x31,
	0x63, 0x53, 0xdd, 0x5b, 0xdb, 0xa1, 0xba, 0x0c, 0xcc, 0xd1, 0x4e, 0xdb, 0xc7, 0x93, 0xc1, 0xd5,
	0x14, 0xeb, 0x0a, 0x11, 0x5f, 0x48, 0x85, 0xcc, 0x8c, 0x58, 0x82, 0x35, 0xfd, 0x44, 0xff, 0x07,
	0xd5, 0x13, 0x32, 0xc6, 0x06, 0xb1, 0x8c, 0xa9, 0x8b, 0x4f, 0xc8, 0x65, 0x2d, 0xcb, 0x90, 0x65,
	0x0a, 0x6d, 0x5b, 0x3d, 0x06, 0xa3, 0xca, 0x0a, 0xaa, 0x5a, 0x8e, 0x2b, 0xcb, 0xd1, 0xb2, 0x79,
	0xf9, 0x98, 0x79, 0x0f, 0xa0, 0x28, 0xcc, 0x9b, 0xe1, 0x5a, 0x81, 0xa1, 0x14, 0x6e, 0xe0, 0x0c,
	0x6b, 0x8f, 0x40, 0x09, 0x94, 0x43, 0x00, 0xf9, 0xfd, 0xee, 0x61, 0xb3, 0xa5, 0xab, 0x2b, 0x48,
	0x81, 0xec, 0x7e, 0xfb, 0xb0, 0xa5, 0xa6, 0x34, 0x1d, 0x4a, 0xcc, 0x81, 0xde, 0xd4, 0xb1, 0x3d,
	0x8c, 0xde, 0x81, 0xbc, 0xe7, 0x9b, 0xfe, 0xcc, 0x63, 0xb6, 0x57, 0xf7, 0x56, 0x99, 0x91, 0x7d,
	0x06, 0x6a, 0x38, 0x16, 0xd6, 0x05, 0x1a, 0x6d, 0x41, 0xc6, 0x37, 0x47, 0xcc, 0x15, 0xa5, 0x3d,
	0x25, 0x70, 0x85, 0x4e, 0x81, 0xda, 0x09, 0x3c, 0x6c, 0x7b, 0xbd, 0xd9, 0xcb, 0x31, 0x19, 0x1e,
	0x12, 0xfb, 0xac, 0xe7, 0x3a, 0x3e, 0x1e, 0xfa, 0xd8, 0xba, 0xbd, 0x94, 0x6d, 0x28, 0x4e, 0x83,
	0xdd, 0x4c, 0x96, 0xa2, 0x47, 0x00, 0xed, 0x39, 0xbc, 0xb6, 0xef, 0xb8, 0x23, 0x1c, 0x89, 0x1a,
	0x38, 0x67, 0xd8, 0xa6, 0xd1, 0xb0, 0x01, 0x39, 0x9f, 0x7e, 0x8b, 0x58, 0xe0, 0x0b, 0xb4, 0x05,
	0xca, 0xd4, 0xf4, 0xbc, 0x0b, 0xc7, 0xb5, 0x44, 0x2c, 0x84, 0x6b, 0xed, 0xb7, 0xb0, 0xbd, 0x98,
	0xd9, 0x6d, 0x75, 0xde, 0x80, 0xdc, 0xb9, 0x39, 0x26, 0x81, 0xbe, 0x7c, 0xa1, 0xed, 0x42, 0xed,
	0x05, 0x76, 0xc9, 0xc9, 0xd5, 0x4d, 0x95, 0xd5, 0xbe, 0x87, 0x87, 0x4b, 0x76, 0xdc, 0x56, 0xa3,
	0x5d, 0x28, 0x4d, 0x19, 0x0f, 0x63, 0x4c, 0xec, 0x33, 0x71, 0x66, 0x9c, 0x3a, 0xe2, 0xad, 0xc3,
	0x34, 0xfc, 0xd6, 0x3e, 0x86, 0x4a, 0x6b, 0x32, 0xf5, 0xaf, 0x6e, 0x2d, 0x4b, 0x03, 0x50, 0xc4,
	0xce, 0x57, 0xda, 0xeb, 0xa0, 0x7c, 0x33, 0x73, 0x7c, 0x93, 0xda, 0x18, 0x24, 0x5b, 0x4a, 0x4a,
	0xb6, 0x4b, 0xa8, 0x08, 0xfc, 0x6d, 0x2d, 0x7a, 0x03, 0x4a, 0xbe, 0xe3, 0x9b, 0x63, 0xe3, 0xe5,
	0x95, 0x8f, 0x3d, 0x66, 0x51, 0x46, 0x07, 0x06, 0xfa, 0x92, 0x42, 0xd0, 0x43, 0x80, 0x99, 0x87,
	0x2d, 0x81, 0xcf, 0x30, 0x7c, 0x91, 0x42, 0x18, 0x5a, 0x7b, 0x01, 0xe5, 0x63, 0x0f, 0xbb, 0xb7,
	0x17, 0xfc, 0x10, 0xb2, 0x33, 0x0f, 0xbb, 0xc2, 0x87, 0x45, 0x46, 0xc6, 0x38, 0x31, 0xb0, 0xf6,
	0x7b, 0xc8, 0xd2, 0x15, 0x15, 0x6f, 0x0e, 0x87, 0xce, 0xcc, 0xf6, 0x0d, 0x51, 0x46, 0x8a, 0x7a,
	0x51, 0x40, 0xda, 0x16, 0xda, 0x84, 0xfc, 0xc8, 0x75, 0x66, 0x53, 0xaa, 0x79, 0x86, 0xe6, 0x32,
	0x5f, 0xa1, 0x37, 0xa1, 0x6c, 0x11, 0x6f, 0x3a, 0x36, 0xaf, 0x0c, 0xdb, 0x9c, 0x60, 0x51, 0x3e,
	0x4a, 0x02, 0xd6, 0x31, 0x27, 0x58, 0xfb, 0x1d, 0x54, 0x07, 0x97, 0x6d, 0xfb, 0xc4, 0xb9, 0xbd,
	0xee, 0x6f, 0x41, 0xde, 0x67, 0x5b, 0x85, 0xf6, 0x25, 0x9e, 0xb5, 0x9c, 0x9b, 0x40, 0x69, 0x0f,
	0x21, 0xcf, 0x21, 0x68, 0x1d, 0x72, 0xfe, 0x65, 0xa4, 0x7e, 0xd6, 0xbf, 0x6c, 0x5b, 0xda, 0x19,
	0xac, 0xb1, 0x2c, 0xa1, 0x56, 0x86, 0xf1, 0xfb, 0x00, 0x8a, 0xc3, 0x31, 0xc1, 0xb2, 0xb1, 0x0a,
	0x07, 0xb4, 0x2d, 0xf4, 0x16, 0x54, 0x04, 0xd2, 0xc3, 0x43, 0x17, 0xfb, 0x22, 0xf1, 0xca, 0x1c,
	0xd8, 0x67, 0xb0, 0x28, 0x03, 0x32, 0x72, 0x06, 0x74, 0xa0, 0x72, 0xf7, 0x1c, 0xe4, 0xfc, 0xd2,
	0x32, 0xbf, 0x47, 0xa0, 0xfc, 0x48, 0xce, 0x9d, 0x80, 0x7a, 0x84, 0x7d, 0xd3, 0x32, 0xef, 0x12,
	0x94, 0x4f, 0x40, 0x99, 0x88, 0xcd, 0xc2, 0xc3, 0x15, 0x46, 0x1a, 0x72, 0x0c, 0xd1, 0xda, 0x7f,
	0x32, 0xa0, 0x04, 0x60, 0xe9, 0xae, 0x29, 0xb2, 0xbb, 0x26, 0x48, 0x95, 0x74, 0x94, 0x2a, 0x14,
	0xe6, 0x91, 0xef, 0x79, 0x44, 0x64, 0x75, 0xf6, 0x4d, 0x4d, 0x98, 0xf8, 0x64, 0x82, 0xd9, 0x45,
	0x92, 0xd5, 0xf9, 0x02, 0xdd, 0x83, 0x3c, 0xf1, 0x0c, 0x8b, 0xb8, 0xec, 0x02, 0x51, 0xf4, 0x1c,
	0xf1, 0x9a, 0xc4, 0xa5, 0x0c, 0x30, 0x2d, 0xd8, 0xfc, 0xf2, 0x60, 0xdf, 0xb4, 0x1c, 0x0e, 0x4f,
	0xf1, 0xf0, 0xcc, 0x9b, 0x4d, 0x82, 0x9b, 0x23, 0x58, 0xd3, 0x08, 0xb6, 0xb0, 0x8b, 0x4f, 0x0c,
	0xa6, 0x8a, 0xc2, 0x23, 0x98, 0x41, 0x7a, 0x54, 0x9f, 0x47, 0x50, 0x26, 0x9e, 0xe1, 0x62, 0xd3,
	0x32, 0x1c, 0x7b, 0x7c, 0x55, 0x2b, 0x32, 0x59, 0x40, 0x3c, 0x1d, 0x9b, 0x56, 0xd7, 0x1e, 0x5f,
	0xd1, 0x58, 0x26, 0x9e, 0xe1, 0x9d, 0x9a, 0x2e, 0x36, 0x5f, 0x8e, 0x71, 0x0d, 0x18, 0x45, 0x89,
	0x78, 0xfd, 0x00, 0x44, 0x75, 0x9a, 0x50, 0xfd, 0x4b, 0x5c, 0x27, 0xfa, 0x4d, 0x2f, 0x4e, 0xef,
	0xca, 0xab, 0x95, 0x1f, 0xa5, 0x1e, 0x97, 0x75, 0xfa, 0x49, 0x35, 0xf1, 0x5d, 0x8c, 0x0d, 0x96,
	0x3c, 0xb5, 0x0a, 0xb3, 0xb5, 0x48, 0x21, 0x0d, 0x0a, 0x40, 0xf7, 0x41, 0xc1, 0x8e, 0x67, 0xd0,
	0x6b, 0xb2, 0x56, 0x65, 0x8c, 0x0a, 0xd8, 0xf1, 0xf6, 0xc9, 0x18, 0x53, 0x15, 0x28, 0x8a, 0xd8,
	0x9e, 0x6f, 0xda, 0x43, 0x5c, 0x5b, 0xe5, 0xe9, 0x84, 0x1d, 0xaf, 0x2d, 0x40, 0x94, 0x84, 0xa9,
	0x68, 0xf8, 0xa6, 0x3b, 0xc2, 0x7e, 0x4d, 0xe5, 0x24, 0x0c, 0x36, 0x60, 0x20, 0xea, 0xd0, 0x09,
	0x19, 0xd1, 0xd0, 0x5e, 0xe3, 0xa1, 0x32, 0x21, 0xa3, 0xb6, 0x45, 0xe5, 0x52, 0x30, 0x73, 0x0f,
	0xe2, 0x72, 0x27, 0x64, 0xc4, 0x9c, 0xc3, 0x8f, 0xc0, 0x19, 0x4e, 0x6a, 0xeb, 0xc1, 0x11, 0x74,
	0x87, 0x13, 0xed, 0x21, 0x14, 0x28, 0x7a, 0x59, 0x35, 0xdc, 0x87, 0x32, 0x45, 0x1f, 0x92, 0x09,
	0xf1, 0x97, 0xd0, 0x50, 0xd8, 0x89, 0xeb, 0x4c, 0x82, 0xd0, 0xa0, 0xdf, 0x34, 0x7c, 0x7c, 0x47,
	0x24, 0x4e, 0xda, 0x77, 0xb4, 0x2f, 0xa0, 0x70, 0xe4, 0x9c, 0x63, 0xca, 0xe2, 0x3e, 0x28, 0xce,
	0xd8, 0x32, 0x24, 0x36, 0x05, 0x67, 0x6c, 0x31, 0x1d, 0xef, 0x83, 0x62, 0xe3, 0x0b, 0x43, 0x0a,
	0xb4, 0x82, 0x8d, 0x2f, 0x28, 0x4a, 0x7b, 0x09, 0x85, 0xc1, 0x65, 0xe3, 0x74, 0x66, 0x9f, 0x2d,
	0xac, 0x01, 0xb4, 0x7a, 0x8d, 0xb1, 0x3d, 0x12, 0x1b, 0xb3, 0xba, 0x58, 0x51, 0xb8, 0x73, 0x72,
	0xe2, 0x61, 0x5f, 0x44, 0xa9, 0x58, 0x51, 0xa5, 0x59, 0x4e, 0x64, 0xd9, 0x99, 0xb2, 0x6f, 0xed,
	0x1c, 0x36, 0xbe, 0x75, 0x89, 0x8f, 0xfb, 0xb3, 0xc9, 0xc4, 0x74, 0x6f, 0x7f, 0xcf, 0xa0, 0x67,
	0x50, 0xbe, 0x90, 0x18, 0x88, 0x84, 0xe3, 0x3d, 0x59, 0x8c, 0x73, 0x8c, 0x4c, 0x3b, 0x80, 0xb2,
	0x8c, 0x45, 0x35, 0x28, 0xd8, 0x43, 0x6a, 0x2a, 0x17, 0x98, 0xd5, 0x83, 0x25, 0x0b, 0x3b, 0x76,
	0xc5, 0xb0, 0xbc, 0x4b, 0x8b, 0xb0, 0xa3, 0x90, 0x3e, 0xf9, 0x1e, 0x6b, 0x87, 0x90, 0x1b, 0x5c,
	0xb6, 0x6c, 0x6b, 0xb1, 0x8b, 0x16, 0xa5, 0xb0, 0x9c, 0x6d, 0x99, 0x78, 0xb6, 0x69, 0x7f, 0x80,
	0xb5, 0xa6, 0xe9, 0x9b, 0xcc, 0xe9, 0xb7, 0xf7, 0xc5, 0x53, 0x28, 0x5a, 0xc1, 0x6e, 0xe1, 0x88,
	0x2a, 0xa3, 0x8d, 0x78, 0x46, 0x04, 0x5a, 0x17, 0x8a, 0x21, 0x5c, 0x3a, 0xcb, 0xd4, 0x92, 0xb3,
	0x4c, 0x2f, 0x3c, 0xcb, 0x8c, 0x74, 0x96, 0x27, 0xa0, 0xea, 0xf8, 0x9c, 0x78, 0xc4, 0xb1, 0xef,
	0x54, 0x34, 0x5d, 0xb1, 0x39, 0x56, 0x34, 0x43, 0x8e, 0x21, 0x5a, 0xb3, 0x40, 0x09, 0xa0, 0xb4,
	0x1d, 0x76, 0xf1, 0xb9, 0xdc, 0xed, 0xbb, 0xf8, 0x9c, 0xb6, 0xc3, 0x41, 0xa1, 0x4c, 0x2f, 0x2a,
	0x94, 0x99, 0xc5, 0x85, 0x32, 0x2b, 0x15, 0x4a, 0xed, 0x53, 0x28, 0x45, 0xd6, 0x2c, 0xce, 0x42,
	0x49, 0x78, 0x5a, 0x16, 0x4e, 0xa3, 0x5a, 0xc7, 0xc3, 0xab, 0xe1, 0x18, 0xb7, 0x6c, 0xff, 0x8e,
	0x51, 0xed, 0x4a, 0x0c, 0x62, 0x51, 0x1d, 0xe3, 0x1c, 0x23, 0xd3, 0xfe, 0x92, 0x82, 0xb2, 0x8c,
	0xa6, 0x65, 0xcd, 0xc5, 0x9e, 0xef, 0xb8, 0x58, 0x4e, 0xfe, 0x92, 0x80, 0xb1, 0x02, 0xf0, 0x06,
	0x04, 0x4b, 0xc9, 0x10, 0x10, 0x20, 0xd9, 0x93, 0xf2, 0x95, 0xf3, 0x00, 0x8a, 0x16, 0x1e, 0x1b,
	0xf2, 0xb5, 0xa3, 0x58, 0x78, 0x7c, 0x74, 0xcd, 0xcd, 0xa3, 0xed, 0xc1, 0x6a, 0xdc, 0x29, 0xaf,
	0x92, 0xb2, 0x53, 0x49, 0xd9, 0xda, 0xaf, 0x60, 0x95, 0xbd, 0x1c, 0xb0, 0x3b, 0x21, 0x1e, 0x3d,
	0x0a, 0x8f, 0xaa, 0x43, 0xaf, 0x1b, 0x46, 0xac, 0xe8, 0xec, 0x9b, 0x1e, 0x2c, 0xcb, 0xee, 0xa0,
	0xd5, 0x66, 0x0b, 0xed, 0x8f, 0x29, 0x80, 0x0e, 0xbe, 0x60, 0x4d, 0xed, 0x92, 0x13, 0x7c, 0x00,
	0xc5, 0xe8, 0xee, 0xe2, 0x9b, 0x15, 0x37, 0xb8, 0xb9, 0xe4, 0x57, 0x42, 0x26, 0xfe, 0x4a, 0xa0,
	0xf5, 0x02, 0x5f, 0x4e, 0x89, 0x8b, 0x3d, 0x61, 0x7e, 0xb0, 0x64, 0xae, 0x71, 0x9d, 0x29, 0x67,
	0xc9, 0x1d, 0xa0, 0x50, 0x00, 0x65, 0xa9, 0xfd, 0x2d, 0x0d, 0x95, 0xe3, 0xa9, 0x65, 0xfa, 0x38,
	0xd0, 0x2a, 0x79, 0xe9, 0xbf, 0x03, 0xab, 0x33, 0x46, 0x60, 0xc4, 0x5e, 0x28, 0x8a, 0x5e, 0xe5,
	0xe0, 0x5e, 0xa0, 0xc1, 0x75, 0xda, 0xbd, 0x07, 0x6b, 0x82, 0x09, 0xd3, 0xca, 0xf4, 0x69, 0x56,
	0xf1, 0xe8, 0x56, 0x39, 0xa2, 0x15, 0xc2, 0xd1, 0xeb, 0x00, 0x12, 0x55, 0x8e, 0x59, 0x23, 0x41,
	0xe2, 0x3e, 0xca, 0x27, 0x7c, 0xf4, 0x18, 0x04, 0x43, 0xa9, 0x07, 0x28, 0xc8, 0xfa, 0x86, 0x7d,
	0x40, 0xcc, 0x2f, 0x4a, 0xdc, 0x2f, 0x12, 0x9b, 0x88, 0xa6, 0x28, 0xb3, 0x69, 0x06, 0x1e, 0xb4,
	0x01, 0x49, 0x6f, 0x95, 0x5b, 0x27, 0xd6, 0x07, 0x20, 0x3d, 0x6f, 0x6e, 0xf2, 0x02, 0xfa, 0x53,
	0x0a, 0xaa, 0xac, 0x53, 0xd1, 0xf1, 0x90, 0x4c, 0x69, 0xab, 0x4a, 0x3d, 0x4f, 0x2c, 0x6c, 0xfb,
	0xc4, 0x0f, 0x42, 0x36, 0x5c, 0xa3, 0x67, 0x90, 0x95, 0x46, 0x03, 0x6f, 0x72, 0x35, 0x62, 0xdb,
	0x77, 0xc2, 0x2f, 0x36, 0x2a, 0x60, 0xe4, 0xda, 0x0e, 0x54, 0x62, 0x60, 0xfa, 0x30, 0x3f, 0xee,
	0xb3, 0x27, 0x7a, 0x11, 0x72, 0x07, 0x7a, 0xf7, 0xb8, 0xa7, 0xa6, 0x18, 0xb0, 0xd3, 0xfe, 0x4e,
	0x4d, 0x6b, 0x7f, 0x4e, 0x41, 0xbe, 0xde, 0x38, 0x5c, 0x16, 0xd6, 0x1f, 0xd2, 0x23, 0x13, 0xec,
	0x84, 0x91, 0xeb, 0x0b, 0x54, 0xd1, 0x23, 0xaa, 0xf8, 0x29, 0x67, 0xe6, 0x4e, 0x39, 0xcf, 0x3a,
	0x21, 0x1a, 0xec, 0x99, 0xc7, 0xa5, 0x3d, 0x95, 0x31, 0xdb, 0x77, 0xc6, 0x16, 0x76, 0x39, 0x4b,
	0x81, 0xd7, 0xfe, 0x91, 0x06, 0x88, 0x3c, 0x39, 0x17, 0xdd, 0x0b, 0xfb, 0xf1, 0x45, 0x03, 0x98,
	0xf8, 0x8b, 0x3f, 0x9b, 0x78, 0xf1, 0xcb, 0xe9, 0x97, 0x9b, 0x4b, 0xbf, 0xe5, 0xd1, 0x1a, 0x5e,
	0x00, 0x05, 0xf9, 0x02, 0x78, 0x26, 0xcf, 0x74, 0x14, 0x76, 0x70, 0xb5, 0x44, 0x48, 0x2c, 0x1a,
	0xed, 0xd0, 0xa6, 0xea, 0xc2, 0xc6, 0x2e, 0xbd, 0xf3, 0x8b, 0xa2, 0xa9, 0xa2, 0x6b, 0x7e, 0xed,
	0xb3, 0x77, 0x1b, 0x70, 0x83, 0xe8, 0x77, 0x3c, 0xfe, 0x4b, 0x89, 0xba, 0x20, 0xcf, 0x67, 0x82,
	0x99, 0xcc, 0x8a, 0x34, 0xa9, 0x49, 0x69, 0xef, 0xca, 0x71, 0xff, 0x23, 0xaf, 0x97, 0x6d, 0x00,
	0x76, 0x2a, 0xed, 0xe6, 0x82, 0x0a, 0xa3, 0xb9, 0xb0, 0x2e, 0x9f, 0xdc, 0xad, 0x53, 0x68, 0x0f,
	0x4a, 0x27, 0xd1, 0x7e, 0x11, 0x5e, 0xf3, 0x11, 0x21, 0x13, 0x69, 0x7f, 0x4f, 0x43, 0x49, 0x42,
	0xde, 0xe8, 0xa9, 0x23, 0xfb, 0x37, 0x13, 0xf7, 0x6f, 0x2c, 0xbe, 0xb3, 0xb7, 0x8f, 0xef, 0xdc,
	0x7c, 0x5c, 0x0c, 0x59, 0x5c, 0xe4, 0x79, 0x5c, 0xb0, 0xc5, 0x92, 0x68, 0xd9, 0x84, 0xbc, 0x78,
	0x23, 0x28, 0xc1, 0xfc, 0x8d, 0x3d, 0x0f, 0x9e, 0x42, 0x8e, 0x3a, 0x08, 0xb3, 0x58, 0xa8, 0xee,
	0x6d, 0x26, 0x1d, 0xc2, 0x5c, 0x89, 0x75, 0x4e, 0xa4, 0xed, 0x42, 0x8e, 0xad, 0x51, 0x19, 0x94,
	0x7a, 0xa3, 0xd1, 0xea, 0x0d, 0x5a, 0x4d, 0x75, 0x05, 0x95, 0xa0, 0xd0, 0x6b, 0x75, 0x9a, 0xed,
	0xce, 0x81, 0x9a, 0xa2, 0x28, 0xbd, 0xf5, 0x75, 0xab, 0x41, 0x51, 0x69, 0xda, 0x5d, 0x75, 0x1b,
	0x47, 0x77, 0x3c, 0xb3, 0x27, 0xa0, 0x38, 0xc3, 0x89, 0x7c, 0x60, 0xbc, 0xbb, 0x0a, 0x39, 0x86,
	0x68, 0xed, 0xaf, 0x69, 0x50, 0x02, 0xf0, 0x4f, 0x3d, 0xa7, 0xed, 0xe4, 0x39, 0x15, 0x7f, 0xd6,
	0x23, 0x79, 0x12, 0x3f, 0x92, 0xf5, 0x98, 0xc9, 0x3f, 0xf5, 0x3c, 0x4e, 0xe1, 0x9e, 0x8e, 0x87,
	0x98, 0x9c, 0x63, 0xeb, 0x8e, 0x87, 0xf2, 0x36, 0xe4, 0xbc, 0x6b, 0x53, 0x88, 0xa3, 0xb5, 0x0b,
	0x58, 0xeb, 0xe0, 0x8b, 0x58, 0xce, 0xfe, 0x2c, 0x65, 0x5f, 0xfb, 0x0c, 0x8a, 0x1d, 0x7c, 0xd1,
	0x6d, 0x1c, 0x2d, 0x13, 0xb8, 0x9d, 0x14, 0x28, 0x9f, 0xaf, 0x36, 0x81, 0x0d, 0xde, 0xeb, 0x24,
	0x54, 0x4f, 0x06, 0xd5, 0xa2, 0x1e, 0x22, 0xbd, 0xac, 0x87, 0x58, 0xae, 0xad, 0x06, 0xea, 0xb1,
	0xcd, 0x3c, 0xc6, 0xe5, 0x2d, 0xaa, 0x7d, 0x8f, 0x01, 0x1d, 0x12, 0xcf, 0x8f, 0x2a, 0xa9, 0xb7,
	0xec, 0x15, 0xfe, 0x04, 0xd6, 0x29, 0xa5, 0xa4, 0xfa, 0x52, 0xd2, 0xb7, 0x41, 0xa5, 0xa4, 0x41,
	0x60, 0x2d, 0xa5, 0x7b, 0x9f, 0xbe, 0x8f, 0x62, 0x11, 0xc3, 0x5e, 0xe6, 0x7c, 0xee, 0x10, 0xaa,
	0x59, 0x60, 0xeb, 0xb6, 0xa5, 0x69, 0xa0, 0xf4, 0x5c, 0xe7, 0x9c, 0x58, 0xd8, 0xa5, 0x11, 0x6e,
	0x39, 0x13, 0x93, 0x04, 0x85, 0x5e, 0xac, 0xb4, 0x11, 0xac, 0x05, 0x34, 0xde, 0x9d, 0xaa, 0xc2,
	0x54, 0xec, 0x8e, 0x55, 0x85, 0x80, 0xa5, 0x1e, 0xa2, 0xdf, 0xfd, 0x67, 0x1a, 0x20, 0xe2, 0x80,
	0xf2, 0x90, 0xee, 0x3e, 0xe7, 0xf9, 0x71, 0xdc, 0x79, 0xde, 0xe9, 0x7e, 0xdb, 0x51, 0x53, 0xe8,
	0x1e, 0xac, 0xf5, 0x07, 0x5d, 0xbd, 0x7e, 0xd0, 0x32, 0x3a, 0xdd, 0x81, 0xb1, 0xdf, 0x3d, 0xee,
	0x34, 0xd5, 0x34, 0xda, 0x82, 0xcd, 0x00, 0x5c, 0x3f, 0xd4, 0x5b, 0xf5, 0xe6, 0x6f, 0x8c, 0xd6,
	0x77, 0xed, 0xfe, 0xa0, 0xaf, 0x66, 0xd0, 0x36, 0xd4, 0x02, 0x5c, 0xaf, 0xa5, 0x1f, 0xb5, 0xfb,
	0xfd, 0x76, 0xb7, 0xd3, 0x6c, 0x75, 0xda, 0xad, 0xa6, 0x9a, 0x45, 0xf7, 0xe1, 0x5e, 0xa3, 0xdb,
	0x19, 0xb4, 0xbe, 0x1b, 0x18, 0xb4, 0x19, 0x32, 0xf4, 0xd6, 0x37, 0xc7, 0x6d, 0xbd, 0xd5, 0x54,
	0x73, 0x48, 0x85, 0x72, 0xaf, 0x3e, 0xf8, 0xca, 0x68, 0x77, 0x5e, 0xd4, 0x0f, 0xdb, 0x4d, 0x35,
	0x4f, 0x89, 0x7b, 0xc7, 0x5f, 0x1e, 0xb6, 0x1b, 0xc6, 0x61, 0xbb, 0xf3, 0x5c, 0xd2, 0xa0, 0x40,
	0xa5, 0xc8, 0x28, 0xb1, 0xc7, 0x68, 0xd6, 0x07, 0x2d, 0x55, 0x41, 0x8f, 0x60, 0x7b, 0x11, 0xb6,
	0x57, 0xef, 0xf7, 0xbf, 0xed, 0xea, 0x4d, 0xb5, 0x48, 0x59, 0xcb, 0x86, 0xf5, 0x8f, 0x7b, 0xbd,
	0xae, 0x4e, 0xab, 0x00, 0x20, 0x04, 0x55, 0xa6, 0x5a, 0x24, 0xae, 0x84, 0xd6, 0xa0, 0x32, 0xe8,
	0x3e, 0x6f, 0x75, 0x42, 0xe5, 0xca, 0xd4, 0x07, 0xfc, 0x26, 0x37, 0xfa, 0x5f, 0xd5, 0x75, 0xd9,
	0x3f, 0x95, 0xbd, 0x1f, 0xd2, 0x90, 0xad, 0xcf, 0xfc, 0x53, 0xf4, 0x39, 0x54, 0xe3, 0x33, 0x55,
	0x14, 0x5c, 0x22, 0x89, 0x41, 0xeb, 0x16, 0xe2, 0x13, 0x5b, 0x79, 0x26, 0xaa, 0xad, 0xa0, 0x8f,
	0x01, 0x35, 0x89, 0x37, 0x31, 0x6d, 0x7f, 0x2c, 0xf1, 0xa8, 0xc8, 0xb4, 0xaf, 0xb6, 0xd6, 0xa2,
	0x51, 0x75, 0xb4, 0xf3, 0x6b, 0xd8, 0x58, 0xf4, 0x9b, 0x07, 0xda, 0x8e, 0xe4, 0xcf, 0x37, 0x1f,
	0x4b, 0xb4, 0x68, 0x42, 0x2d, 0xd4, 0x22, 0xc9, 0x2f, 0xa1, 0xcb, 0x6b, 0xc9, 0xc6, 0x3b, 0xe4,
	0xb2, 0xf7, 0xdf, 0x02, 0x14, 0xfa, 0xbe, 0xe3, 0x9a, 0x23, 0x8c, 0x3e, 0x80, 0x62, 0xc3, 0xc5,
	0xf4, 0x11, 0x40, 0x5c, 0x54, 0xe6, 0x7b, 0xf8, 0xfc, 0x4c, 0xa8, 0x10, 0xfb, 0x89, 0x42, 0x5b,
	0x41, 0x4f, 0x21, 0xdf, 0xc4, 0x63, 0x4c, 0xab, 0xf9, 0x0d, 0xa8, 0xdf, 0x85, 0xec, 0x91, 0x73,
	0x1e, 0xd0, 0x8a, 0x91, 0xd9, 0x12, 0xda, 0x5d, 0x28, 0xb4, 0x6d, 0x6f, 0x8a, 0x87, 0x7e, 0x82,
	0xf5, 0xbd, 0xf8, 0x84, 0x37, 0xda, 0xf1, 0x0c, 0x20, 0xaa, 0x23, 0x37, 0xdc, 0xb4, 0x9b, 0x42,
	0x1f, 0x41, 0xb9, 0xef, 0x9b, 0xae, 0xcf, 0x86, 0x54, 0x83, 0x4b, 0xe1, 0xb9, 0xe0, 0x17, 0x95,
	0xad, 0x75, 0x79, 0x64, 0x1f, 0x09, 0xfb, 0x04, 0x80, 0x6d, 0xe0, 0x33, 0x9d, 0xb2, 0x20, 0x62,
	0xab, 0xad, 0xfb, 0xf3, 0x23, 0xb1, 0x70, 0xe3, 0xe3, 0x14, 0xfa, 0x10, 0x2a, 0xfb, 0xc4, 0x26,
	0xde, 0x69, 0x20, 0x11, 0xc4, 0xee, 0x96, 0x6d, 0x2d, 0x71, 0xc6, 0x47, 0xa0, 0xd0, 0xca, 0xcc,
	0x46, 0xac, 0x71, 0xc3, 0x36, 0x13, 0x53, 0x27, 0xd9, 0xb2, 0x8f, 0xa1, 0x42, 0x1d, 0x12, 0xcc,
	0x56, 0xbc, 0x85, 0x3e, 0x49, 0xce, 0x91, 0xd8, 0xce, 0x5f, 0x43, 0x99, 0xca, 0x0b, 0x67, 0x3f,
	0x6a, 0x82, 0xf4, 0x7a, 0xb9, 0x9f, 0xc0, 0xaa, 0xce, 0x07, 0x0b, 0xd7, 0x30, 0x58, 0x6c, 0xe8,
	0x17, 0x50, 0xe2, 0x2a, 0xb3, 0xe9, 0x05, 0x5a, 0x0b, 0x15, 0x0e, 0x66, 0xb4, 0xc2, 0xb9, 0x8b,
	0x66, 0x3e, 0x4c, 0x76, 0x1d, 0xd6, 0x43, 0xd9, 0xd2, 0x74, 0x66, 0x63, 0xc1, 0xae, 0x65, 0x3a,
	0xec, 0x41, 0x59, 0x80, 0xb8, 0x12, 0x37, 0x89, 0xec, 0xf7, 0x20, 0xdf, 0xc7, 0x7e, 0xbd, 0x71,
	0x88, 0xf8, 0x4f, 0x3c, 0xfc, 0xc5, 0xb8, 0x84, 0x78, 0x07, 0x8a, 0xfc, 0xb6, 0xbe, 0x21, 0xfd,
	0xfb, 0xa0, 0x1c, 0xdb, 0xde, 0x8d, 0xd9, 0x7f, 0x00, 0xca, 0x01, 0xf6, 0xd9, 0xcf, 0x7c, 0x22,
	0x98, 0x83, 0x9f, 0x04, 0xc5, 0x86, 0xd8, 0x2f, 0x80, 0xda, 0xca, 0xde, 0x0f, 0x29, 0xf6, 0x93,
	0xfe, 0x08, 0xbb, 0xe8, 0x29, 0x14, 0x0e, 0xb0, 0x3f, 0x30, 0x47, 0x9e, 0x90, 0xc4, 0x7f, 0xea,
	0xdf, 0x52, 0xa3, 0x85, 0xe4, 0x6c, 0x6e, 0xf5, 0xc0, 0x1c, 0xc5, 0x89, 0xaf, 0xb1, 0xe2, 0xc6,
	0xe4, 0x7b, 0xff, 0x52, 0x20, 0xc7, 0x3b, 0xe3, 0xcf, 0x41, 0xe5, 0x45, 0x49, 0x7a, 0xed, 0xf2,
	0x8b, 0x36, 0x1a, 0x39, 0x5d, 0x53, 0xe0, 0x50, 0x1d, 0x54, 0xee, 0x6e, 0x69, 0x3f, 0x97, 0x19,
	0x9b, 0x0f, 0x5d, 0xc7, 0xe2, 0x0b, 0x58, 0x13, 0xc5, 0x68, 0x4e, 0x87, 0xe8, 0xf9, 0x77, 0x1d,
	0x83, 0x4f, 0xd8, 0xc0, 0xd6, 0x39, 0xc3, 0xd7, 0xed, 0x5f, 0xec, 0xb7, 0x03, 0x58, 0x4d, 0x34,
	0x52, 0x88, 0x0b, 0x9a, 0x6f, 0xaf, 0xae, 0xd1, 0x60, 0x37, 0x85, 0x9a, 0x50, 0xad, 0x5b, 0x96,
	0xfc, 0x36, 0xdc, 0x0c, 0xbc, 0x18, 0x6f, 0x1b, 0xb7, 0x6a, 0x73, 0xfd, 0xb1, 0x7c, 0x81, 0xad,
	0xcd, 0xb5, 0x9a, 0xe8, 0xbe, 0xe4, 0xce, 0x5b, 0xf1, 0x52, 0x93, 0x9d, 0x1f, 0xaa, 0x85, 0xb6,
	0x25, 0x1a, 0xc2, 0xeb, 0x38, 0xb1, 0x92, 0x55, 0x89, 0xf5, 0xa4, 0x88, 0x97, 0xb7, 0x64, 0x9f,
	0xba, 0xc4, 0xc9, 0x9f, 0x41, 0xf5, 0x00, 0xcb, 0x12, 0xe7, 0x4f, 0xe7, 0x3a, 0x43, 0x7e, 0x01,
	0xa5, 0xba, 0x65, 0x45, 0x6f, 0xb9, 0xc0, 0xaf, 0xbc, 0xa1, 0x17, 0x95, 0x36, 0xf9, 0xa6, 0xd4,
	0x56, 0xd0, 0x2f, 0xa1, 0x74, 0x80, 0xc3, 0x76, 0x76, 0x5e, 0xe6, 0xd2, 0x8d, 0x75, 0x5e, 0xda,
	0xc3, 0x46, 0x58, 0x58, 0x9b, 0x6c, 0x8e, 0x97, 0x32, 0xd8, 0x4d, 0xa1, 0x06, 0x6f, 0xd0, 0x63,
	0x7d, 0xb2, 0x97, 0xbc, 0xfd, 0xb6, 0x82, 0xba, 0x39, 0xff, 0xfa, 0x12, 0xe5, 0x16, 0x1d, 0x39,
	0x33, 0x3b, 0xce, 0x05, 0xdd, 0x5b, 0xb4, 0x6b, 0x99, 0xeb, 0x1b, 0xb0, 0x71, 0x6c, 0x4f, 0x7e,
	0x22, 0x93, 0x4f, 0xb9, 0x3f, 0xc2, 0x0e, 0x3d, 0x69, 0xc7, 0x66, 0xac, 0xdb, 0xf6, 0x64, 0x1b,
	0xf6, 0xbe, 0x84, 0x42, 0xcf, 0xc5, 0xe7, 0x04, 0x5f, 0xd0, 0xf3, 0xa0, 0xf7, 0x5e, 0xb0, 0xbc,
	0xf1, 0x55, 0xfb, 0x32, 0xcf, 0xfe, 0x20, 0xf5, 0xff, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x41,
	0x04, 0xa9, 0xb2, 0x2d, 0x25, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthClient interface {
	ForgeUserToken(ctx context.Context, in *ForgeUserTokenReq, opts ...grpc.CallOption) (*TokenResponse, error)
	DismantleUserToken(ctx context.Context, in *TokenReq, opts ...grpc.CallOption) (*UserResponse, error)
	ForgePublicLinkToken(ctx context.Context, in *ForgePublicLinkTokenReq, opts ...grpc.CallOption) (*TokenResponse, error)
	DismantlePublicLinkToken(ctx context.Context, in *TokenReq, opts ...grpc.CallOption) (*PublicLinkResponse, error)
}

type authClient struct {
	cc *grpc.ClientConn
}

func NewAuthClient(cc *grpc.ClientConn) AuthClient {
	return &authClient{cc}
}

func (c *authClient) ForgeUserToken(ctx context.Context, in *ForgeUserTokenReq, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/api.Auth/ForgeUserToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) DismantleUserToken(ctx context.Context, in *TokenReq, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/api.Auth/DismantleUserToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) ForgePublicLinkToken(ctx context.Context, in *ForgePublicLinkTokenReq, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/api.Auth/ForgePublicLinkToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) DismantlePublicLinkToken(ctx context.Context, in *TokenReq, opts ...grpc.CallOption) (*PublicLinkResponse, error) {
	out := new(PublicLinkResponse)
	err := c.cc.Invoke(ctx, "/api.Auth/DismantlePublicLinkToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
type AuthServer interface {
	ForgeUserToken(context.Context, *ForgeUserTokenReq) (*TokenResponse, error)
	DismantleUserToken(context.Context, *TokenReq) (*UserResponse, error)
	ForgePublicLinkToken(context.Context, *ForgePublicLinkTokenReq) (*TokenResponse, error)
	DismantlePublicLinkToken(context.Context, *TokenReq) (*PublicLinkResponse, error)
}

func RegisterAuthServer(s *grpc.Server, srv AuthServer) {
	s.RegisterService(&_Auth_serviceDesc, srv)
}

func _Auth_ForgeUserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgeUserTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).ForgeUserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Auth/ForgeUserToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).ForgeUserToken(ctx, req.(*ForgeUserTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_DismantleUserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).DismantleUserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Auth/DismantleUserToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).DismantleUserToken(ctx, req.(*TokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_ForgePublicLinkToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgePublicLinkTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).ForgePublicLinkToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Auth/ForgePublicLinkToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).ForgePublicLinkToken(ctx, req.(*ForgePublicLinkTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_DismantlePublicLinkToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).DismantlePublicLinkToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Auth/DismantlePublicLinkToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).DismantlePublicLinkToken(ctx, req.(*TokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Auth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ForgeUserToken",
			Handler:    _Auth_ForgeUserToken_Handler,
		},
		{
			MethodName: "DismantleUserToken",
			Handler:    _Auth_DismantleUserToken_Handler,
		},
		{
			MethodName: "ForgePublicLinkToken",
			Handler:    _Auth_ForgePublicLinkToken_Handler,
		},
		{
			MethodName: "DismantlePublicLinkToken",
			Handler:    _Auth_DismantlePublicLinkToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// StorageClient is the client API for Storage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StorageClient interface {
	CreateDir(ctx context.Context, in *PathReq, opts ...grpc.CallOption) (*EmptyResponse, error)
	Delete(ctx context.Context, in *PathReq, opts ...grpc.CallOption) (*EmptyResponse, error)
	Move(ctx context.Context, in *MoveReq, opts ...grpc.CallOption) (*EmptyResponse, error)
	Inspect(ctx context.Context, in *PathReq, opts ...grpc.CallOption) (*MetadataResponse, error)
	ListFolder(ctx context.Context, in *PathReq, opts ...grpc.CallOption) (Storage_ListFolderClient, error)
	StartWriteTx(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*TxInfoResponse, error)
	WriteChunk(ctx context.Context, opts ...grpc.CallOption) (Storage_WriteChunkClient, error)
	FinishWriteTx(ctx context.Context, in *TxEnd, opts ...grpc.CallOption) (*EmptyResponse, error)
	ReadFile(ctx context.Context, in *PathReq, opts ...grpc.CallOption) (Storage_ReadFileClient, error)
	ListRevisions(ctx context.Context, in *PathReq, opts ...grpc.CallOption) (Storage_ListRevisionsClient, error)
	ReadRevision(ctx context.Context, in *RevisionReq, opts ...grpc.CallOption) (Storage_ReadRevisionClient, error)
	RestoreRevision(ctx context.Context, in *RevisionReq, opts ...grpc.CallOption) (*EmptyResponse, error)
	ListRecycle(ctx context.Context, in *PathLimitReq, opts ...grpc.CallOption) (Storage_ListRecycleClient, error)
	RestoreRecycleEntry(ctx context.Context, in *RecycleEntryReq, opts ...grpc.CallOption) (*EmptyResponse, error)
	EmptyRecycle(ctx context.Context, in *PathReq, opts ...grpc.CallOption) (*EmptyResponse, error)
	SetACL(ctx context.Context, in *ACLReq, opts ...grpc.CallOption) (*EmptyResponse, error)
	UpdateACL(ctx context.Context, in *ACLReq, opts ...grpc.CallOption) (*EmptyResponse, error)
	UnsetACL(ctx context.Context, in *ACLReq, opts ...grpc.CallOption) (*EmptyResponse, error)
	GetQuota(ctx context.Context, in *QuotaReq, opts ...grpc.CallOption) (*QuotaResponse, error)
}

type storageClient struct {
	cc *grpc.ClientConn
}

func NewStorageClient(cc *grpc.ClientConn) StorageClient {
	return &storageClient{cc}
}

func (c *storageClient) CreateDir(ctx context.Context, in *PathReq, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.Storage/CreateDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) Delete(ctx context.Context, in *PathReq, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.Storage/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) Move(ctx context.Context, in *MoveReq, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.Storage/Move", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) Inspect(ctx context.Context, in *PathReq, opts ...grpc.CallOption) (*MetadataResponse, error) {
	out := new(MetadataResponse)
	err := c.cc.Invoke(ctx, "/api.Storage/Inspect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) ListFolder(ctx context.Context, in *PathReq, opts ...grpc.CallOption) (Storage_ListFolderClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Storage_serviceDesc.Streams[0], "/api.Storage/ListFolder", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageListFolderClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Storage_ListFolderClient interface {
	Recv() (*MetadataResponse, error)
	grpc.ClientStream
}

type storageListFolderClient struct {
	grpc.ClientStream
}

func (x *storageListFolderClient) Recv() (*MetadataResponse, error) {
	m := new(MetadataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageClient) StartWriteTx(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*TxInfoResponse, error) {
	out := new(TxInfoResponse)
	err := c.cc.Invoke(ctx, "/api.Storage/StartWriteTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) WriteChunk(ctx context.Context, opts ...grpc.CallOption) (Storage_WriteChunkClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Storage_serviceDesc.Streams[1], "/api.Storage/WriteChunk", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageWriteChunkClient{stream}
	return x, nil
}

type Storage_WriteChunkClient interface {
	Send(*TxChunk) error
	CloseAndRecv() (*WriteSummaryResponse, error)
	grpc.ClientStream
}

type storageWriteChunkClient struct {
	grpc.ClientStream
}

func (x *storageWriteChunkClient) Send(m *TxChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storageWriteChunkClient) CloseAndRecv() (*WriteSummaryResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(WriteSummaryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageClient) FinishWriteTx(ctx context.Context, in *TxEnd, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.Storage/FinishWriteTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) ReadFile(ctx context.Context, in *PathReq, opts ...grpc.CallOption) (Storage_ReadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Storage_serviceDesc.Streams[2], "/api.Storage/ReadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageReadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Storage_ReadFileClient interface {
	Recv() (*DataChunkResponse, error)
	grpc.ClientStream
}

type storageReadFileClient struct {
	grpc.ClientStream
}

func (x *storageReadFileClient) Recv() (*DataChunkResponse, error) {
	m := new(DataChunkResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageClient) ListRevisions(ctx context.Context, in *PathReq, opts ...grpc.CallOption) (Storage_ListRevisionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Storage_serviceDesc.Streams[3], "/api.Storage/ListRevisions", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageListRevisionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Storage_ListRevisionsClient interface {
	Recv() (*RevisionResponse, error)
	grpc.ClientStream
}

type storageListRevisionsClient struct {
	grpc.ClientStream
}

func (x *storageListRevisionsClient) Recv() (*RevisionResponse, error) {
	m := new(RevisionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageClient) ReadRevision(ctx context.Context, in *RevisionReq, opts ...grpc.CallOption) (Storage_ReadRevisionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Storage_serviceDesc.Streams[4], "/api.Storage/ReadRevision", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageReadRevisionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Storage_ReadRevisionClient interface {
	Recv() (*DataChunkResponse, error)
	grpc.ClientStream
}

type storageReadRevisionClient struct {
	grpc.ClientStream
}

func (x *storageReadRevisionClient) Recv() (*DataChunkResponse, error) {
	m := new(DataChunkResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageClient) RestoreRevision(ctx context.Context, in *RevisionReq, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.Storage/RestoreRevision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) ListRecycle(ctx context.Context, in *PathLimitReq, opts ...grpc.CallOption) (Storage_ListRecycleClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Storage_serviceDesc.Streams[5], "/api.Storage/ListRecycle", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageListRecycleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Storage_ListRecycleClient interface {
	Recv() (*RecycleEntryResponse, error)
	grpc.ClientStream
}

type storageListRecycleClient struct {
	grpc.ClientStream
}

func (x *storageListRecycleClient) Recv() (*RecycleEntryResponse, error) {
	m := new(RecycleEntryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageClient) RestoreRecycleEntry(ctx context.Context, in *RecycleEntryReq, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.Storage/RestoreRecycleEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) EmptyRecycle(ctx context.Context, in *PathReq, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.Storage/EmptyRecycle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) SetACL(ctx context.Context, in *ACLReq, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.Storage/SetACL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) UpdateACL(ctx context.Context, in *ACLReq, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.Storage/UpdateACL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) UnsetACL(ctx context.Context, in *ACLReq, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.Storage/UnsetACL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetQuota(ctx context.Context, in *QuotaReq, opts ...grpc.CallOption) (*QuotaResponse, error) {
	out := new(QuotaResponse)
	err := c.cc.Invoke(ctx, "/api.Storage/GetQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServer is the server API for Storage service.
type StorageServer interface {
	CreateDir(context.Context, *PathReq) (*EmptyResponse, error)
	Delete(context.Context, *PathReq) (*EmptyResponse, error)
	Move(context.Context, *MoveReq) (*EmptyResponse, error)
	Inspect(context.Context, *PathReq) (*MetadataResponse, error)
	ListFolder(*PathReq, Storage_ListFolderServer) error
	StartWriteTx(context.Context, *EmptyReq) (*TxInfoResponse, error)
	WriteChunk(Storage_WriteChunkServer) error
	FinishWriteTx(context.Context, *TxEnd) (*EmptyResponse, error)
	ReadFile(*PathReq, Storage_ReadFileServer) error
	ListRevisions(*PathReq, Storage_ListRevisionsServer) error
	ReadRevision(*RevisionReq, Storage_ReadRevisionServer) error
	RestoreRevision(context.Context, *RevisionReq) (*EmptyResponse, error)
	ListRecycle(*PathLimitReq, Storage_ListRecycleServer) error
	RestoreRecycleEntry(context.Context, *RecycleEntryReq) (*EmptyResponse, error)
	EmptyRecycle(context.Context, *PathReq) (*EmptyResponse, error)
	SetACL(context.Context, *ACLReq) (*EmptyResponse, error)
	UpdateACL(context.Context, *ACLReq) (*EmptyResponse, error)
	UnsetACL(context.Context, *ACLReq) (*EmptyResponse, error)
	GetQuota(context.Context, *QuotaReq) (*QuotaResponse, error)
}

func RegisterStorageServer(s *grpc.Server, srv StorageServer) {
	s.RegisterService(&_Storage_serviceDesc, srv)
}

func _Storage_CreateDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).CreateDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Storage/CreateDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).CreateDir(ctx, req.(*PathReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Storage/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).Delete(ctx, req.(*PathReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Storage/Move",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).Move(ctx, req.(*MoveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_Inspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).Inspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Storage/Inspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).Inspect(ctx, req.(*PathReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_ListFolder_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PathReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageServer).ListFolder(m, &storageListFolderServer{stream})
}

type Storage_ListFolderServer interface {
	Send(*MetadataResponse) error
	grpc.ServerStream
}

type storageListFolderServer struct {
	grpc.ServerStream
}

func (x *storageListFolderServer) Send(m *MetadataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Storage_StartWriteTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).StartWriteTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Storage/StartWriteTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).StartWriteTx(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_WriteChunk_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StorageServer).WriteChunk(&storageWriteChunkServer{stream})
}

type Storage_WriteChunkServer interface {
	SendAndClose(*WriteSummaryResponse) error
	Recv() (*TxChunk, error)
	grpc.ServerStream
}

type storageWriteChunkServer struct {
	grpc.ServerStream
}

func (x *storageWriteChunkServer) SendAndClose(m *WriteSummaryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storageWriteChunkServer) Recv() (*TxChunk, error) {
	m := new(TxChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Storage_FinishWriteTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxEnd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).FinishWriteTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Storage/FinishWriteTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).FinishWriteTx(ctx, req.(*TxEnd))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_ReadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PathReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageServer).ReadFile(m, &storageReadFileServer{stream})
}

type Storage_ReadFileServer interface {
	Send(*DataChunkResponse) error
	grpc.ServerStream
}

type storageReadFileServer struct {
	grpc.ServerStream
}

func (x *storageReadFileServer) Send(m *DataChunkResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Storage_ListRevisions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PathReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageServer).ListRevisions(m, &storageListRevisionsServer{stream})
}

type Storage_ListRevisionsServer interface {
	Send(*RevisionResponse) error
	grpc.ServerStream
}

type storageListRevisionsServer struct {
	grpc.ServerStream
}

func (x *storageListRevisionsServer) Send(m *RevisionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Storage_ReadRevision_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RevisionReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageServer).ReadRevision(m, &storageReadRevisionServer{stream})
}

type Storage_ReadRevisionServer interface {
	Send(*DataChunkResponse) error
	grpc.ServerStream
}

type storageReadRevisionServer struct {
	grpc.ServerStream
}

func (x *storageReadRevisionServer) Send(m *DataChunkResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Storage_RestoreRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevisionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).RestoreRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Storage/RestoreRevision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).RestoreRevision(ctx, req.(*RevisionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_ListRecycle_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PathLimitReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageServer).ListRecycle(m, &storageListRecycleServer{stream})
}

type Storage_ListRecycleServer interface {
	Send(*RecycleEntryResponse) error
	grpc.ServerStream
}

type storageListRecycleServer struct {
	grpc.ServerStream
}

func (x *storageListRecycleServer) Send(m *RecycleEntryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Storage_RestoreRecycleEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecycleEntryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).RestoreRecycleEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Storage/RestoreRecycleEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).RestoreRecycleEntry(ctx, req.(*RecycleEntryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_EmptyRecycle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).EmptyRecycle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Storage/EmptyRecycle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).EmptyRecycle(ctx, req.(*PathReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_SetACL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ACLReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).SetACL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Storage/SetACL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).SetACL(ctx, req.(*ACLReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_UpdateACL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ACLReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).UpdateACL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Storage/UpdateACL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).UpdateACL(ctx, req.(*ACLReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_UnsetACL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ACLReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).UnsetACL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Storage/UnsetACL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).UnsetACL(ctx, req.(*ACLReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuotaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Storage/GetQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetQuota(ctx, req.(*QuotaReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Storage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Storage",
	HandlerType: (*StorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDir",
			Handler:    _Storage_CreateDir_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Storage_Delete_Handler,
		},
		{
			MethodName: "Move",
			Handler:    _Storage_Move_Handler,
		},
		{
			MethodName: "Inspect",
			Handler:    _Storage_Inspect_Handler,
		},
		{
			MethodName: "StartWriteTx",
			Handler:    _Storage_StartWriteTx_Handler,
		},
		{
			MethodName: "FinishWriteTx",
			Handler:    _Storage_FinishWriteTx_Handler,
		},
		{
			MethodName: "RestoreRevision",
			Handler:    _Storage_RestoreRevision_Handler,
		},
		{
			MethodName: "RestoreRecycleEntry",
			Handler:    _Storage_RestoreRecycleEntry_Handler,
		},
		{
			MethodName: "EmptyRecycle",
			Handler:    _Storage_EmptyRecycle_Handler,
		},
		{
			MethodName: "SetACL",
			Handler:    _Storage_SetACL_Handler,
		},
		{
			MethodName: "UpdateACL",
			Handler:    _Storage_UpdateACL_Handler,
		},
		{
			MethodName: "UnsetACL",
			Handler:    _Storage_UnsetACL_Handler,
		},
		{
			MethodName: "GetQuota",
			Handler:    _Storage_GetQuota_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListFolder",
			Handler:       _Storage_ListFolder_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WriteChunk",
			Handler:       _Storage_WriteChunk_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReadFile",
			Handler:       _Storage_ReadFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListRevisions",
			Handler:       _Storage_ListRevisions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadRevision",
			Handler:       _Storage_ReadRevision_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListRecycle",
			Handler:       _Storage_ListRecycle_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}

// TaggerClient is the client API for Tagger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaggerClient interface {
	GetTags(ctx context.Context, in *TagReq, opts ...grpc.CallOption) (Tagger_GetTagsClient, error)
	SetTag(ctx context.Context, in *TagReq, opts ...grpc.CallOption) (*EmptyResponse, error)
	UnSetTag(ctx context.Context, in *TagReq, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type taggerClient struct {
	cc *grpc.ClientConn
}

func NewTaggerClient(cc *grpc.ClientConn) TaggerClient {
	return &taggerClient{cc}
}

func (c *taggerClient) GetTags(ctx context.Context, in *TagReq, opts ...grpc.CallOption) (Tagger_GetTagsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Tagger_serviceDesc.Streams[0], "/api.Tagger/GetTags", opts...)
	if err != nil {
		return nil, err
	}
	x := &taggerGetTagsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Tagger_GetTagsClient interface {
	Recv() (*TagResponse, error)
	grpc.ClientStream
}

type taggerGetTagsClient struct {
	grpc.ClientStream
}

func (x *taggerGetTagsClient) Recv() (*TagResponse, error) {
	m := new(TagResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *taggerClient) SetTag(ctx context.Context, in *TagReq, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.Tagger/SetTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taggerClient) UnSetTag(ctx context.Context, in *TagReq, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.Tagger/UnSetTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaggerServer is the server API for Tagger service.
type TaggerServer interface {
	GetTags(*TagReq, Tagger_GetTagsServer) error
	SetTag(context.Context, *TagReq) (*EmptyResponse, error)
	UnSetTag(context.Context, *TagReq) (*EmptyResponse, error)
}

func RegisterTaggerServer(s *grpc.Server, srv TaggerServer) {
	s.RegisterService(&_Tagger_serviceDesc, srv)
}

func _Tagger_GetTags_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TagReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TaggerServer).GetTags(m, &taggerGetTagsServer{stream})
}

type Tagger_GetTagsServer interface {
	Send(*TagResponse) error
	grpc.ServerStream
}

type taggerGetTagsServer struct {
	grpc.ServerStream
}

func (x *taggerGetTagsServer) Send(m *TagResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Tagger_SetTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaggerServer).SetTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Tagger/SetTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaggerServer).SetTag(ctx, req.(*TagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tagger_UnSetTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaggerServer).UnSetTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Tagger/UnSetTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaggerServer).UnSetTag(ctx, req.(*TagReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tagger_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Tagger",
	HandlerType: (*TaggerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetTag",
			Handler:    _Tagger_SetTag_Handler,
		},
		{
			MethodName: "UnSetTag",
			Handler:    _Tagger_UnSetTag_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTags",
			Handler:       _Tagger_GetTags_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}

// ShareClient is the client API for Share service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ShareClient interface {
	// with user context, relative to the user logged in
	CreatePublicLink(ctx context.Context, in *NewLinkReq, opts ...grpc.CallOption) (*PublicLinkResponse, error)
	UpdatePublicLink(ctx context.Context, in *UpdateLinkReq, opts ...grpc.CallOption) (*PublicLinkResponse, error)
	InspectPublicLink(ctx context.Context, in *ShareIDReq, opts ...grpc.CallOption) (*PublicLinkResponse, error)
	RevokePublicLink(ctx context.Context, in *ShareIDReq, opts ...grpc.CallOption) (*EmptyResponse, error)
	ListPublicLinks(ctx context.Context, in *ListPublicLinksReq, opts ...grpc.CallOption) (Share_ListPublicLinksClient, error)
	// with user context, relative to user logged in
	AddFolderShare(ctx context.Context, in *NewFolderShareReq, opts ...grpc.CallOption) (*FolderShareResponse, error)
	UpdateFolderShare(ctx context.Context, in *UpdateFolderShareReq, opts ...grpc.CallOption) (*FolderShareResponse, error)
	ListFolderShares(ctx context.Context, in *ListFolderSharesReq, opts ...grpc.CallOption) (Share_ListFolderSharesClient, error)
	UnshareFolder(ctx context.Context, in *UnshareFolderReq, opts ...grpc.CallOption) (*EmptyResponse, error)
	GetFolderShare(ctx context.Context, in *ShareIDReq, opts ...grpc.CallOption) (*FolderShareResponse, error)
	// with user context, relative to user logged in
	AddOCMShare(ctx context.Context, in *NewOCMReq, opts ...grpc.CallOption) (*OCMShareResponse, error)
	GetOCMShare(ctx context.Context, in *ShareIDReq, opts ...grpc.CallOption) (*OCMShareResponse, error)
	ListOCMShares(ctx context.Context, in *ListOCMSharesReq, opts ...grpc.CallOption) (Share_ListOCMSharesClient, error)
	// with user context, relative to the user logged in, in this case, the receiver
	ListReceivedShares(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (Share_ListReceivedSharesClient, error)
	MountReceivedShare(ctx context.Context, in *ReceivedShareReq, opts ...grpc.CallOption) (*EmptyResponse, error)
	UnmountReceivedShare(ctx context.Context, in *ReceivedShareReq, opts ...grpc.CallOption) (*EmptyResponse, error)
	ListProviders(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (Share_ListProvidersClient, error)
}

type shareClient struct {
	cc *grpc.ClientConn
}

func NewShareClient(cc *grpc.ClientConn) ShareClient {
	return &shareClient{cc}
}

func (c *shareClient) CreatePublicLink(ctx context.Context, in *NewLinkReq, opts ...grpc.CallOption) (*PublicLinkResponse, error) {
	out := new(PublicLinkResponse)
	err := c.cc.Invoke(ctx, "/api.Share/CreatePublicLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareClient) UpdatePublicLink(ctx context.Context, in *UpdateLinkReq, opts ...grpc.CallOption) (*PublicLinkResponse, error) {
	out := new(PublicLinkResponse)
	err := c.cc.Invoke(ctx, "/api.Share/UpdatePublicLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareClient) InspectPublicLink(ctx context.Context, in *ShareIDReq, opts ...grpc.CallOption) (*PublicLinkResponse, error) {
	out := new(PublicLinkResponse)
	err := c.cc.Invoke(ctx, "/api.Share/InspectPublicLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareClient) RevokePublicLink(ctx context.Context, in *ShareIDReq, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.Share/RevokePublicLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareClient) ListPublicLinks(ctx context.Context, in *ListPublicLinksReq, opts ...grpc.CallOption) (Share_ListPublicLinksClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Share_serviceDesc.Streams[0], "/api.Share/ListPublicLinks", opts...)
	if err != nil {
		return nil, err
	}
	x := &shareListPublicLinksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Share_ListPublicLinksClient interface {
	Recv() (*PublicLinkResponse, error)
	grpc.ClientStream
}

type shareListPublicLinksClient struct {
	grpc.ClientStream
}

func (x *shareListPublicLinksClient) Recv() (*PublicLinkResponse, error) {
	m := new(PublicLinkResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *shareClient) AddFolderShare(ctx context.Context, in *NewFolderShareReq, opts ...grpc.CallOption) (*FolderShareResponse, error) {
	out := new(FolderShareResponse)
	err := c.cc.Invoke(ctx, "/api.Share/AddFolderShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareClient) UpdateFolderShare(ctx context.Context, in *UpdateFolderShareReq, opts ...grpc.CallOption) (*FolderShareResponse, error) {
	out := new(FolderShareResponse)
	err := c.cc.Invoke(ctx, "/api.Share/UpdateFolderShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareClient) ListFolderShares(ctx context.Context, in *ListFolderSharesReq, opts ...grpc.CallOption) (Share_ListFolderSharesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Share_serviceDesc.Streams[1], "/api.Share/ListFolderShares", opts...)
	if err != nil {
		return nil, err
	}
	x := &shareListFolderSharesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Share_ListFolderSharesClient interface {
	Recv() (*FolderShareResponse, error)
	grpc.ClientStream
}

type shareListFolderSharesClient struct {
	grpc.ClientStream
}

func (x *shareListFolderSharesClient) Recv() (*FolderShareResponse, error) {
	m := new(FolderShareResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *shareClient) UnshareFolder(ctx context.Context, in *UnshareFolderReq, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.Share/UnshareFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareClient) GetFolderShare(ctx context.Context, in *ShareIDReq, opts ...grpc.CallOption) (*FolderShareResponse, error) {
	out := new(FolderShareResponse)
	err := c.cc.Invoke(ctx, "/api.Share/GetFolderShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareClient) AddOCMShare(ctx context.Context, in *NewOCMReq, opts ...grpc.CallOption) (*OCMShareResponse, error) {
	out := new(OCMShareResponse)
	err := c.cc.Invoke(ctx, "/api.Share/AddOCMShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareClient) GetOCMShare(ctx context.Context, in *ShareIDReq, opts ...grpc.CallOption) (*OCMShareResponse, error) {
	out := new(OCMShareResponse)
	err := c.cc.Invoke(ctx, "/api.Share/GetOCMShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareClient) ListOCMShares(ctx context.Context, in *ListOCMSharesReq, opts ...grpc.CallOption) (Share_ListOCMSharesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Share_serviceDesc.Streams[2], "/api.Share/ListOCMShares", opts...)
	if err != nil {
		return nil, err
	}
	x := &shareListOCMSharesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Share_ListOCMSharesClient interface {
	Recv() (*OCMShareResponse, error)
	grpc.ClientStream
}

type shareListOCMSharesClient struct {
	grpc.ClientStream
}

func (x *shareListOCMSharesClient) Recv() (*OCMShareResponse, error) {
	m := new(OCMShareResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *shareClient) ListReceivedShares(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (Share_ListReceivedSharesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Share_serviceDesc.Streams[3], "/api.Share/ListReceivedShares", opts...)
	if err != nil {
		return nil, err
	}
	x := &shareListReceivedSharesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Share_ListReceivedSharesClient interface {
	Recv() (*ReceivedShareResponse, error)
	grpc.ClientStream
}

type shareListReceivedSharesClient struct {
	grpc.ClientStream
}

func (x *shareListReceivedSharesClient) Recv() (*ReceivedShareResponse, error) {
	m := new(ReceivedShareResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *shareClient) MountReceivedShare(ctx context.Context, in *ReceivedShareReq, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.Share/MountReceivedShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareClient) UnmountReceivedShare(ctx context.Context, in *ReceivedShareReq, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.Share/UnmountReceivedShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareClient) ListProviders(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (Share_ListProvidersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Share_serviceDesc.Streams[4], "/api.Share/ListProviders", opts...)
	if err != nil {
		return nil, err
	}
	x := &shareListProvidersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Share_ListProvidersClient interface {
	Recv() (*ProvidersResponse, error)
	grpc.ClientStream
}

type shareListProvidersClient struct {
	grpc.ClientStream
}

func (x *shareListProvidersClient) Recv() (*ProvidersResponse, error) {
	m := new(ProvidersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ShareServer is the server API for Share service.
type ShareServer interface {
	// with user context, relative to the user logged in
	CreatePublicLink(context.Context, *NewLinkReq) (*PublicLinkResponse, error)
	UpdatePublicLink(context.Context, *UpdateLinkReq) (*PublicLinkResponse, error)
	InspectPublicLink(context.Context, *ShareIDReq) (*PublicLinkResponse, error)
	RevokePublicLink(context.Context, *ShareIDReq) (*EmptyResponse, error)
	ListPublicLinks(*ListPublicLinksReq, Share_ListPublicLinksServer) error
	// with user context, relative to user logged in
	AddFolderShare(context.Context, *NewFolderShareReq) (*FolderShareResponse, error)
	UpdateFolderShare(context.Context, *UpdateFolderShareReq) (*FolderShareResponse, error)
	ListFolderShares(*ListFolderSharesReq, Share_ListFolderSharesServer) error
	UnshareFolder(context.Context, *UnshareFolderReq) (*EmptyResponse, error)
	GetFolderShare(context.Context, *ShareIDReq) (*FolderShareResponse, error)
	// with user context, relative to user logged in
	AddOCMShare(context.Context, *NewOCMReq) (*OCMShareResponse, error)
	GetOCMShare(context.Context, *ShareIDReq) (*OCMShareResponse, error)
	ListOCMShares(*ListOCMSharesReq, Share_ListOCMSharesServer) error
	// with user context, relative to the user logged in, in this case, the receiver
	ListReceivedShares(*EmptyReq, Share_ListReceivedSharesServer) error
	MountReceivedShare(context.Context, *ReceivedShareReq) (*EmptyResponse, error)
	UnmountReceivedShare(context.Context, *ReceivedShareReq) (*EmptyResponse, error)
	ListProviders(*EmptyReq, Share_ListProvidersServer) error
}

func RegisterShareServer(s *grpc.Server, srv ShareServer) {
	s.RegisterService(&_Share_serviceDesc, srv)
}

func _Share_CreatePublicLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServer).CreatePublicLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Share/CreatePublicLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServer).CreatePublicLink(ctx, req.(*NewLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Share_UpdatePublicLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServer).UpdatePublicLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Share/UpdatePublicLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServer).UpdatePublicLink(ctx, req.(*UpdateLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Share_InspectPublicLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServer).InspectPublicLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Share/InspectPublicLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServer).InspectPublicLink(ctx, req.(*ShareIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Share_RevokePublicLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServer).RevokePublicLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Share/RevokePublicLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServer).RevokePublicLink(ctx, req.(*ShareIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Share_ListPublicLinks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListPublicLinksReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ShareServer).ListPublicLinks(m, &shareListPublicLinksServer{stream})
}

type Share_ListPublicLinksServer interface {
	Send(*PublicLinkResponse) error
	grpc.ServerStream
}

type shareListPublicLinksServer struct {
	grpc.ServerStream
}

func (x *shareListPublicLinksServer) Send(m *PublicLinkResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Share_AddFolderShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewFolderShareReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServer).AddFolderShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Share/AddFolderShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServer).AddFolderShare(ctx, req.(*NewFolderShareReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Share_UpdateFolderShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFolderShareReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServer).UpdateFolderShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Share/UpdateFolderShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServer).UpdateFolderShare(ctx, req.(*UpdateFolderShareReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Share_ListFolderShares_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListFolderSharesReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ShareServer).ListFolderShares(m, &shareListFolderSharesServer{stream})
}

type Share_ListFolderSharesServer interface {
	Send(*FolderShareResponse) error
	grpc.ServerStream
}

type shareListFolderSharesServer struct {
	grpc.ServerStream
}

func (x *shareListFolderSharesServer) Send(m *FolderShareResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Share_UnshareFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnshareFolderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServer).UnshareFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Share/UnshareFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServer).UnshareFolder(ctx, req.(*UnshareFolderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Share_GetFolderShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServer).GetFolderShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Share/GetFolderShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServer).GetFolderShare(ctx, req.(*ShareIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Share_AddOCMShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewOCMReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServer).AddOCMShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Share/AddOCMShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServer).AddOCMShare(ctx, req.(*NewOCMReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Share_GetOCMShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServer).GetOCMShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Share/GetOCMShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServer).GetOCMShare(ctx, req.(*ShareIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Share_ListOCMShares_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListOCMSharesReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ShareServer).ListOCMShares(m, &shareListOCMSharesServer{stream})
}

type Share_ListOCMSharesServer interface {
	Send(*OCMShareResponse) error
	grpc.ServerStream
}

type shareListOCMSharesServer struct {
	grpc.ServerStream
}

func (x *shareListOCMSharesServer) Send(m *OCMShareResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Share_ListReceivedShares_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ShareServer).ListReceivedShares(m, &shareListReceivedSharesServer{stream})
}

type Share_ListReceivedSharesServer interface {
	Send(*ReceivedShareResponse) error
	grpc.ServerStream
}

type shareListReceivedSharesServer struct {
	grpc.ServerStream
}

func (x *shareListReceivedSharesServer) Send(m *ReceivedShareResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Share_MountReceivedShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceivedShareReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServer).MountReceivedShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Share/MountReceivedShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServer).MountReceivedShare(ctx, req.(*ReceivedShareReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Share_UnmountReceivedShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceivedShareReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServer).UnmountReceivedShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Share/UnmountReceivedShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServer).UnmountReceivedShare(ctx, req.(*ReceivedShareReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Share_ListProviders_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ShareServer).ListProviders(m, &shareListProvidersServer{stream})
}

type Share_ListProvidersServer interface {
	Send(*ProvidersResponse) error
	grpc.ServerStream
}

type shareListProvidersServer struct {
	grpc.ServerStream
}

func (x *shareListProvidersServer) Send(m *ProvidersResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Share_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Share",
	HandlerType: (*ShareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePublicLink",
			Handler:    _Share_CreatePublicLink_Handler,
		},
		{
			MethodName: "UpdatePublicLink",
			Handler:    _Share_UpdatePublicLink_Handler,
		},
		{
			MethodName: "InspectPublicLink",
			Handler:    _Share_InspectPublicLink_Handler,
		},
		{
			MethodName: "RevokePublicLink",
			Handler:    _Share_RevokePublicLink_Handler,
		},
		{
			MethodName: "AddFolderShare",
			Handler:    _Share_AddFolderShare_Handler,
		},
		{
			MethodName: "UpdateFolderShare",
			Handler:    _Share_UpdateFolderShare_Handler,
		},
		{
			MethodName: "UnshareFolder",
			Handler:    _Share_UnshareFolder_Handler,
		},
		{
			MethodName: "GetFolderShare",
			Handler:    _Share_GetFolderShare_Handler,
		},
		{
			MethodName: "AddOCMShare",
			Handler:    _Share_AddOCMShare_Handler,
		},
		{
			MethodName: "GetOCMShare",
			Handler:    _Share_GetOCMShare_Handler,
		},
		{
			MethodName: "MountReceivedShare",
			Handler:    _Share_MountReceivedShare_Handler,
		},
		{
			MethodName: "UnmountReceivedShare",
			Handler:    _Share_UnmountReceivedShare_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListPublicLinks",
			Handler:       _Share_ListPublicLinks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListFolderShares",
			Handler:       _Share_ListFolderShares_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListOCMShares",
			Handler:       _Share_ListOCMShares_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListReceivedShares",
			Handler:       _Share_ListReceivedShares_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListProviders",
			Handler:       _Share_ListProviders_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}

// PreviewClient is the client API for Preview service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PreviewClient interface {
	ReadPreview(ctx context.Context, in *PathReq, opts ...grpc.CallOption) (Preview_ReadPreviewClient, error)
}

type previewClient struct {
	cc *grpc.ClientConn
}

func NewPreviewClient(cc *grpc.ClientConn) PreviewClient {
	return &previewClient{cc}
}

func (c *previewClient) ReadPreview(ctx context.Context, in *PathReq, opts ...grpc.CallOption) (Preview_ReadPreviewClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Preview_serviceDesc.Streams[0], "/api.Preview/ReadPreview", opts...)
	if err != nil {
		return nil, err
	}
	x := &previewReadPreviewClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Preview_ReadPreviewClient interface {
	Recv() (*DataChunkResponse, error)
	grpc.ClientStream
}

type previewReadPreviewClient struct {
	grpc.ClientStream
}

func (x *previewReadPreviewClient) Recv() (*DataChunkResponse, error) {
	m := new(DataChunkResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PreviewServer is the server API for Preview service.
type PreviewServer interface {
	ReadPreview(*PathReq, Preview_ReadPreviewServer) error
}

func RegisterPreviewServer(s *grpc.Server, srv PreviewServer) {
	s.RegisterService(&_Preview_serviceDesc, srv)
}

func _Preview_ReadPreview_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PathReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PreviewServer).ReadPreview(m, &previewReadPreviewServer{stream})
}

type Preview_ReadPreviewServer interface {
	Send(*DataChunkResponse) error
	grpc.ServerStream
}

type previewReadPreviewServer struct {
	grpc.ServerStream
}

func (x *previewReadPreviewServer) Send(m *DataChunkResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Preview_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Preview",
	HandlerType: (*PreviewServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadPreview",
			Handler:       _Preview_ReadPreview_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
